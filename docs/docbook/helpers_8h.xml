<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_helpers_8h" xml:lang="en-US">
<title>include/evmc/helpers.h File Reference</title>
<indexterm><primary>include/evmc/helpers.h</primary></indexterm>
<para>

<para>EVMC Helpers. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &lt;evmc/evmc.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
</programlisting>Include dependency graph for helpers.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="helpers_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="helpers_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>union <link linkend="_unionevmc__result__optional__storage">evmc_result_optional_storage</link></para>

<para>The union representing <link linkend="_structevmc__result">evmc_result</link> &quot;optional storage&quot;. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>static bool <link linkend="_group__helpers_1ga7e9c2c68b366dda89dba56566aab111d">evmc_is_abi_compatible</link> (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm)</para>

<para>Returns true if the VM has a compatible ABI version. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_group__helpers_1gad7d1edccf65c57e7bbf5aa68399084bd">evmc_vm_name</link> (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm)</para>

<para>Returns the name of the VM. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_group__helpers_1ga9b32326e83633f890e1c41fd2ec2f1fe">evmc_vm_version</link> (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm)</para>

<para>Returns the version of the VM. </para>
</listitem>
            <listitem><para>static bool <link linkend="_group__helpers_1ga5b05e2d9d24fa23dd648bfd8ed023f92">evmc_vm_has_capability</link> (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm, enum <link linkend="_group__EVMC_1ga44f9ecb88cf6422a0072936494fd6ac7">evmc_capabilities</link> capability)</para>

<para>Checks if the VM has the given capability. </para>
</listitem>
            <listitem><para>static void <link linkend="_group__helpers_1ga6204e6ae26e07377b509b2953a8094b2">evmc_destroy</link> (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm)</para>

<para>Destroys the VM instance. </para>
</listitem>
            <listitem><para>static enum <link linkend="_group__EVMC_1ga28d9f527bda67277bccccc100e32260a">evmc_set_option_result</link> <link linkend="_group__helpers_1gaee14c6797a91ae328e43b4f4916f6004">evmc_set_option</link> (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm, char const *name, char const *value)</para>

<para>Sets the option for the VM, if the feature is supported by the VM. </para>
</listitem>
            <listitem><para>static struct <link linkend="_structevmc__result">evmc_result</link> <link linkend="_group__helpers_1ga82fb11f4b40ceec377bf0093ffc1d416">evmc_execute</link> (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm, const struct <link linkend="_structevmc__host__interface">evmc_host_interface</link> *host, struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, enum <link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link> rev, const struct <link linkend="_structevmc__message">evmc_message</link> *msg, uint8_t const *code, size_t code_size)</para>

<para>Executes code in the VM instance. </para>
</listitem>
            <listitem><para>static void <link linkend="_group__helpers_1ga432ca3c26b4b03a175f2a0fbd0692dfa">evmc_free_result_memory</link> (const struct <link linkend="_structevmc__result">evmc_result</link> *result)</para>

<para>The <link linkend="_structevmc__result">evmc_result</link> release function using free() for releasing the memory. </para>
</listitem>
            <listitem><para>static struct <link linkend="_structevmc__result">evmc_result</link> <link linkend="_group__helpers_1ga1eb1facc9b5ddacda368ffdeb89d1a20">evmc_make_result</link> (enum <link linkend="_group__EVMC_1ga4c0be97f333c050ff45321fcaa34d920">evmc_status_code</link> status_code, int64_t gas_left, const uint8_t *output_data, size_t output_size)</para>

<para>Creates the result from the provided arguments. </para>
</listitem>
            <listitem><para>static void <link linkend="_group__helpers_1ga78a610e76b00c5868368bd915bdeffb8">evmc_release_result</link> (struct <link linkend="_structevmc__result">evmc_result</link> *result)</para>

<para>Releases the resources allocated to the execution result. </para>
</listitem>
            <listitem><para>static union <link linkend="_unionevmc__result__optional__storage">evmc_result_optional_storage</link> * <link linkend="_group__result__optional__storage_1gaf07c4782c1ee8f22ad9a3baae8d0d9fe">evmc_get_optional_storage</link> (struct <link linkend="_structevmc__result">evmc_result</link> *result)</para>

<para>Provides read-write access to <link linkend="_structevmc__result">evmc_result</link> &quot;optional storage&quot;. </para>
</listitem>
            <listitem><para>static const union <link linkend="_unionevmc__result__optional__storage">evmc_result_optional_storage</link> * <link linkend="_group__result__optional__storage_1gadc8033f0501ad094c8319da486018939">evmc_get_const_optional_storage</link> (const struct <link linkend="_structevmc__result">evmc_result</link> *result)</para>

<para>Provides read-only access to <link linkend="_structevmc__result">evmc_result</link> &quot;optional storage&quot;. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_group__helpers_1gad9e0e4b4cf8323982572dc54d36f0b40">evmc_status_code_to_string</link> (enum <link linkend="_group__EVMC_1ga4c0be97f333c050ff45321fcaa34d920">evmc_status_code</link> status_code)</para>

<para>Returns text representation of the <link linkend="_group__EVMC_1ga4c0be97f333c050ff45321fcaa34d920">evmc_status_code</link>. </para>
</listitem>
            <listitem><para>static const char * <link linkend="_group__helpers_1gad04bac3144296562478b0447bf3991ff">evmc_revision_to_string</link> (enum <link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link> rev)</para>

<para>Returns the name of the <link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>EVMC Helpers. </para>

<para>A collection of C helper functions for invoking a VM instance methods. These are convenient for languages where invoking function pointers is &quot;ugly&quot; or impossible (such as Go).</para>

<para>It also contains helpers (overloaded operators) for using EVMC types effectively in C++. </para>
<para>
Definition in file <link linkend="_helpers_8h_source">helpers.h</link>.</para>
</section>
</section>
