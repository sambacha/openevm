<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_evmc_8h" xml:lang="en-US">
<title>include/evmc/evmc.h File Reference</title>
<indexterm><primary>include/evmc/evmc.h</primary></indexterm>
<para>

<para>EVMC: Ethereum Client-VM Connector API. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &lt;stdbool.h&gt;
#include &lt;stddef.h&gt;
#include &lt;stdint.h&gt;
</programlisting>Include dependency graph for evmc.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="evmc_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="evmc_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structevmc__bytes32">evmc_bytes32</link></para>

<para>The fixed size array of 32 bytes. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc__address">evmc_address</link></para>

<para>Big-endian 160-bit hash suitable for keeping an Ethereum address. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc__message">evmc_message</link></para>

<para>The message describing an EVM call, including a zero-depth calls from a transaction origin. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc__tx__context">evmc_tx_context</link></para>

<para>The transaction and block data for execution. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc__result">evmc_result</link></para>

<para>The EVM code execution result. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc__host__interface">evmc_host_interface</link></para>

<para>The Host interface. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc__vm">evmc_vm</link></para>

<para>The VM instance. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_group__EVMC_1gab420e51ab90ccc579dce3f6860b69627">EVMC_DEPRECATED</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef struct <link linkend="_structevmc__bytes32">evmc_bytes32</link> <link linkend="_group__EVMC_1gab19677b7977fc98a8d1182256486c8e9">evmc_bytes32</link></para>

<para>The fixed size array of 32 bytes. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structevmc__bytes32">evmc_bytes32</link> <link linkend="_group__EVMC_1ga260738d59f9a23d039dc7a290e0c0a3b">evmc_uint256be</link></para>

<para>The alias for <link linkend="_structevmc__bytes32">evmc_bytes32</link> to represent a big-endian 256-bit integer. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structevmc__address">evmc_address</link> <link linkend="_group__EVMC_1ga0a566da7d9e3c337abf4ef4045d8f5c5">evmc_address</link></para>

<para>Big-endian 160-bit hash suitable for keeping an Ethereum address. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structevmc__tx__context">evmc_tx_context</link>(* <link linkend="_group__EVMC_1ga7b403c029b5b9ad627ffafb8c41ac84b">evmc_get_tx_context_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context)</para>

<para>Get transaction context callback function. </para>
</listitem>
            <listitem><para>typedef <link linkend="_structevmc__bytes32">evmc_bytes32</link>(* <link linkend="_group__EVMC_1ga97c2981658d797d3031720a54740a4b3">evmc_get_block_hash_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, int64_t number)</para>

<para>Get block hash callback function. </para>
</listitem>
            <listitem><para>typedef void(* <link linkend="_group__EVMC_1ga297c7c7ca966c82296a54683143157b1">evmc_release_result_fn</link>) (const struct <link linkend="_structevmc__result">evmc_result</link> *result)</para>

<para>Releases resources assigned to an execution result. </para>
</listitem>
            <listitem><para>typedef bool(* <link linkend="_group__EVMC_1ga4c5464305402bf2a10d94bf2d828d82b">evmc_account_exists_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address)</para>

<para>Check account existence callback function. </para>
</listitem>
            <listitem><para>typedef <link linkend="_structevmc__bytes32">evmc_bytes32</link>(* <link linkend="_group__EVMC_1ga7aff77bf67e8fad5819807b8aafff7cb">evmc_get_storage_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, const <link linkend="_structevmc__bytes32">evmc_bytes32</link> *key)</para>

<para>Get storage callback function. </para>
</listitem>
            <listitem><para>typedef enum <link linkend="_group__EVMC_1gae012fd6b8e5c23806b507c2d3e9fb1aa">evmc_storage_status</link>(* <link linkend="_group__EVMC_1gaf7481ac7c3f1071d5d4d8256d0687e83">evmc_set_storage_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, const <link linkend="_structevmc__bytes32">evmc_bytes32</link> *key, const <link linkend="_structevmc__bytes32">evmc_bytes32</link> *value)</para>

<para>Set storage callback function. </para>
</listitem>
            <listitem><para>typedef <link linkend="_group__EVMC_1ga260738d59f9a23d039dc7a290e0c0a3b">evmc_uint256be</link>(* <link linkend="_group__EVMC_1ga5208ee08734b69bb0a28793f0ecfbc48">evmc_get_balance_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address)</para>

<para>Get balance callback function. </para>
</listitem>
            <listitem><para>typedef size_t(* <link linkend="_group__EVMC_1ga38e37a3a70dec828829cccb461e99de2">evmc_get_code_size_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address)</para>

<para>Get code size callback function. </para>
</listitem>
            <listitem><para>typedef <link linkend="_structevmc__bytes32">evmc_bytes32</link>(* <link linkend="_group__EVMC_1ga7971754ea6e237ffb9e9b7ab102fa16e">evmc_get_code_hash_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address)</para>

<para>Get code hash callback function. </para>
</listitem>
            <listitem><para>typedef size_t(* <link linkend="_group__EVMC_1ga7dc696d1491951200ac5dc4f852a4499">evmc_copy_code_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, size_t code_offset, uint8_t *buffer_data, size_t buffer_size)</para>

<para>Copy code callback function. </para>
</listitem>
            <listitem><para>typedef void(* <link linkend="_group__EVMC_1ga72021774388d535436b0c532f8c6de6c">evmc_selfdestruct_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, const <link linkend="_structevmc__address">evmc_address</link> *beneficiary)</para>

<para>Selfdestruct callback function. </para>
</listitem>
            <listitem><para>typedef void(* <link linkend="_group__EVMC_1gaab96621b67d653758b3da15c2b596938">evmc_emit_log_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, const uint8_t *data, size_t data_size, const <link linkend="_structevmc__bytes32">evmc_bytes32</link> topics[], size_t topics_count)</para>

<para>Log callback function. </para>
</listitem>
            <listitem><para>typedef enum <link linkend="_group__EVMC_1ga9f71195f3873f9979d81d7a5e1b3aaf0">evmc_access_status</link>(* <link linkend="_group__EVMC_1ga8eb6233115c660f8d779eb9b132e93c5">evmc_access_account_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address)</para>

<para>Access account callback function. </para>
</listitem>
            <listitem><para>typedef enum <link linkend="_group__EVMC_1ga9f71195f3873f9979d81d7a5e1b3aaf0">evmc_access_status</link>(* <link linkend="_group__EVMC_1gac33551d757c3762e4cc3dd9bdfeee356">evmc_access_storage_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, const <link linkend="_structevmc__bytes32">evmc_bytes32</link> *key)</para>

<para>Access storage callback function. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structevmc__result">evmc_result</link>(* <link linkend="_group__EVMC_1ga54f569386b52be6eee15ca9e14ed1ef8">evmc_call_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const struct <link linkend="_structevmc__message">evmc_message</link> *msg)</para>

<para>Pointer to the callback function supporting EVM calls. </para>
</listitem>
            <listitem><para>typedef void(* <link linkend="_group__EVMC_1ga1f54475fc7dc20a0c4d370272e39d755">evmc_destroy_fn</link>) (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm)</para>

<para>Destroys the VM instance. </para>
</listitem>
            <listitem><para>typedef enum <link linkend="_group__EVMC_1ga28d9f527bda67277bccccc100e32260a">evmc_set_option_result</link>(* <link linkend="_group__EVMC_1ga5531cee5b83d76c71b06475454f4633b">evmc_set_option_fn</link>) (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm, char const *name, char const *value)</para>

<para>Configures the VM instance. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structevmc__result">evmc_result</link>(* <link linkend="_group__EVMC_1gaed9a4ab5609b55c5e3272d6d37d84ff7">evmc_execute_fn</link>) (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm, const struct <link linkend="_structevmc__host__interface">evmc_host_interface</link> *host, struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, enum <link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link> rev, const struct <link linkend="_structevmc__message">evmc_message</link> *msg, uint8_t const *code, size_t code_size)</para>

<para>Executes the given code using the input from the message. </para>
</listitem>
            <listitem><para>typedef uint32_t <link linkend="_group__EVMC_1ga714bc8ca946adc759403fe072bdd2aa0">evmc_capabilities_flagset</link></para>

<para>Alias for unsigned integer representing a set of bit flags of EVMC capabilities. </para>
</listitem>
            <listitem><para>typedef <link linkend="_group__EVMC_1ga714bc8ca946adc759403fe072bdd2aa0">evmc_capabilities_flagset</link>(* <link linkend="_group__EVMC_1ga9bac25459c5a09d42606e7bd9320445c">evmc_get_capabilities_fn</link>) (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm)</para>

<para>Return the supported capabilities of the VM instance. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum { <link linkend="_group__EVMC_1gga06fc87d81c62e9abb8790b6e5713c55ba1db9144f8af4e62865f0c003c07a02bc">EVMC_ABI_VERSION</link> = 10
 }</para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1gab2fa68a92a6828064a61e46060abc634">evmc_call_kind</link> { 
<link linkend="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634abcf3ae29d9a88ff70b98374fc665694a">EVMC_CALL</link> = 0
, <link linkend="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634a6face22070bace91b429297e88d3ab1a">EVMC_DELEGATECALL</link> = 1
, <link linkend="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634ae9c5b431a0c823f368341c9f026642ef">EVMC_CALLCODE</link> = 2
, <link linkend="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634a1d15450429f540677caea05143344d33">EVMC_CREATE</link> = 3
, 
<link linkend="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634a9ec7e0da8dde8e9bc420d806c621b418">EVMC_CREATE2</link> = 4
 }</para>

<para>The kind of call-like instruction. </para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1ga187a3a658849da19a0c4e8f7b51fa70d">evmc_flags</link> { <link linkend="_group__EVMC_1gga187a3a658849da19a0c4e8f7b51fa70da1d8bef8b2bd39a6bd1936e87b18e95bf">EVMC_STATIC</link> = 1
 }</para>

<para>The flags for <link linkend="_structevmc__message">evmc_message</link>. </para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1ga4c0be97f333c050ff45321fcaa34d920">evmc_status_code</link> { 
<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a4bc3069fec2bab2a55355a72b7db68b7">EVMC_SUCCESS</link> = 0
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920aed5b2a4afa5a47af732569445920a4a9">EVMC_FAILURE</link> = 1
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920aed708e84d49cc1270e54ec20b0ca0a05">EVMC_REVERT</link> = 2
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920abfc47f75656c996c0b29c0553c00fc18">EVMC_OUT_OF_GAS</link> = 3
, 
<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a8ea4f35a269f5fd3a722f2054c993637">EVMC_INVALID_INSTRUCTION</link> = 4
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a443084a263a2325f1e4c629e97685367">EVMC_UNDEFINED_INSTRUCTION</link> = 5
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ae1a613949fe1c994a36488b0bc4c86c4">EVMC_STACK_OVERFLOW</link> = 6
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a640106fdec78d04a1098c512898d4efc">EVMC_STACK_UNDERFLOW</link> = 7
, 
<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a6acf000dfa802a949063a87046f4bb26">EVMC_BAD_JUMP_DESTINATION</link> = 8
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a2981ec30896486ac69bab7c0a1be591b">EVMC_INVALID_MEMORY_ACCESS</link> = 9
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ac139d631ff852379d566c8a60f86ddc0">EVMC_CALL_DEPTH_EXCEEDED</link> = 10
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a92ccaaeb3fd1ee5aa1ad022678c13bac">EVMC_STATIC_MODE_VIOLATION</link> = 11
, 
<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ab960d50047f87925e540bee6230aafb7">EVMC_PRECOMPILE_FAILURE</link> = 12
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ac0e1bf525f51da5b3d34d4f67ca549e1">EVMC_CONTRACT_VALIDATION_FAILURE</link> = 13
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a1cc537c5875de1b42aa5d556f33223d8">EVMC_ARGUMENT_OUT_OF_RANGE</link> = 14
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ac99fbd9645011663df070ae3c367eb4e">EVMC_WASM_UNREACHABLE_INSTRUCTION</link> = 15
, 
<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920aaf0c6c7a736ec498bd390884f143e57b">EVMC_WASM_TRAP</link> = 16
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a12f7061f20d077ce0d14ca86b2d5975d">EVMC_INSUFFICIENT_BALANCE</link> = 17
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920abb1dcac202eac2ed8fd3025645a2fb28">EVMC_INTERNAL_ERROR</link> = -1
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a2f3e0d8777f8d974ead27ae2a6eb2005">EVMC_REJECTED</link> = -2
, 
<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a63aa9b3ac3af61c39c20562509347b86">EVMC_OUT_OF_MEMORY</link> = -3
 }</para>

<para>The execution status code. </para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1gae012fd6b8e5c23806b507c2d3e9fb1aa">evmc_storage_status</link> { 
<link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaad6d527edcbe8a63edad5be80f252330c">EVMC_STORAGE_UNCHANGED</link> = 0
, <link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaaf102ce749767d5277923c221089da2c6">EVMC_STORAGE_MODIFIED</link> = 1
, <link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaa072394aca7925f8de8facf8f8a5e477c">EVMC_STORAGE_MODIFIED_AGAIN</link> = 2
, <link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaa8afd1741edf799d44264654d9f04a5a9">EVMC_STORAGE_ADDED</link> = 3
, 
<link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaae5b6ea5ec988f3b3ceb323ce3c0fa53f">EVMC_STORAGE_DELETED</link> = 4
 }</para>

<para>The effect of an attempt to modify a contract storage item. </para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1ga9f71195f3873f9979d81d7a5e1b3aaf0">evmc_access_status</link> { <link linkend="_group__EVMC_1gga9f71195f3873f9979d81d7a5e1b3aaf0a3a719b69a4c3f9d6b9913b47312b5a76">EVMC_ACCESS_COLD</link> = 0
, <link linkend="_group__EVMC_1gga9f71195f3873f9979d81d7a5e1b3aaf0a584ba0f1ab5c1e5e8a126fdcdde5d994">EVMC_ACCESS_WARM</link> = 1
 }</para>

<para>Access status per EIP-2929: Gas cost increases for state access opcodes. </para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1ga28d9f527bda67277bccccc100e32260a">evmc_set_option_result</link> { <link linkend="_group__EVMC_1gga28d9f527bda67277bccccc100e32260aa4e458cfd9a8d5da0ed5e93a3d3ad5d3b">EVMC_SET_OPTION_SUCCESS</link> = 0
, <link linkend="_group__EVMC_1gga28d9f527bda67277bccccc100e32260aa462712eea718b1a9088aaaf995bcb80e">EVMC_SET_OPTION_INVALID_NAME</link> = 1
, <link linkend="_group__EVMC_1gga28d9f527bda67277bccccc100e32260aa7be8628edb4ac9b2d195894f112d0924">EVMC_SET_OPTION_INVALID_VALUE</link> = 2
 }</para>

<para>Possible outcomes of evmc_set_option. </para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link> { 
<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a622480509359764aa2a258b074812a5f">EVMC_FRONTIER</link> = 0
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a04f0bf686d2b1c50612f9a96480f70a9">EVMC_HOMESTEAD</link> = 1
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a8305858ab32b80a6eced7bf177d6dee2">EVMC_TANGERINE_WHISTLE</link> = 2
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7abbbcae1af73ad1efc570b40bb0363879">EVMC_SPURIOUS_DRAGON</link> = 3
, 
<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7ac4b0c9cfb5d408f17255a15e26938ea6">EVMC_BYZANTIUM</link> = 4
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a7a2ed5cf3d25c8c4a68691721bb969fc">EVMC_CONSTANTINOPLE</link> = 5
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a6d913d4917e87b1fc798b450735acdeb">EVMC_PETERSBURG</link> = 6
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a5f0e287935fd0afd65afea34b51dcf8c">EVMC_ISTANBUL</link> = 7
, 
<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7af53e0cb0d793d60b5fb07c6b4c3c6ab7">EVMC_BERLIN</link> = 8
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7acfe86739fa2a0882d49cf19a94d8ee09">EVMC_LONDON</link> = 9
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7ac79d6325f9e74fd00a6b98eaea3e30a5">EVMC_SHANGHAI</link> = 10
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a8b67f41f15bc079b8ad40dcd7156f576">EVMC_MAX_REVISION</link> = EVMC_SHANGHAI
, 
<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a0dd8bdd55816359290e8fb8648aeb03e">EVMC_LATEST_STABLE_REVISION</link> = EVMC_LONDON
 }</para>

<para>EVM revision. </para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1ga44f9ecb88cf6422a0072936494fd6ac7">evmc_capabilities</link> { <link linkend="_group__EVMC_1gga44f9ecb88cf6422a0072936494fd6ac7a36fd3cfe936b9525eed7f88a7b43a2a8">EVMC_CAPABILITY_EVM1</link> = (1u &lt;&lt; 0)
, <link linkend="_group__EVMC_1gga44f9ecb88cf6422a0072936494fd6ac7af1240f950b5b9ca4369bcac424443e54">EVMC_CAPABILITY_EWASM</link> = (1u &lt;&lt; 1)
, <link linkend="_group__EVMC_1gga44f9ecb88cf6422a0072936494fd6ac7a43ea2aa7b099a2d67bc53c118ff3683d">EVMC_CAPABILITY_PRECOMPILES</link> = (1u &lt;&lt; 2)
 }</para>

<para>Possible capabilities of a VM. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structevmc__vm">evmc_vm</link> * <link linkend="_group__EVMC_1ga4ba5aae5d0250d9c4f6987a78602e795">evmc_create_example_vm</link> (void)</para>

<para>Example of a function creating an instance of an example EVM implementation. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>EVMC: Ethereum Client-VM Connector API. </para>

<para><formalpara><title>Copyright</title>

<para>Copyright 2016-2019 The EVMC Authors. Licensed under the Apache License, Version 2.0.</para>
</formalpara>
</para>
<section xml:id="_group__EVMC_1autotoc_md1">
<title>Terms</title>

<para><orderedlist>
<listitem>
<para><emphasis role="bold">VM</emphasis> – An Ethereum Virtual Machine instance/implementation.</para>
</listitem><listitem>
<para><emphasis role="bold">Host</emphasis> – An entity controlling the VM. The Host requests code execution and responses to VM queries by callback functions. This usually represents an Ethereum Client.</para>
</listitem></orderedlist>
</para>
</section>
<section xml:id="_group__EVMC_1autotoc_md2">
<title>Responsibilities</title>
<section xml:id="_group__EVMC_1autotoc_md3">
<title>VM</title>

<para><itemizedlist>
<listitem>
<para>Executes the code (obviously).</para>
</listitem><listitem>
<para>Calculates the running gas cost and manages the gas counter except the refund counter.</para>
</listitem><listitem>
<para>Controls the call depth, including the exceptional termination of execution in case the maximum depth is reached.</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_group__EVMC_1autotoc_md4">
<title>Host</title>

<para><itemizedlist>
<listitem>
<para>Provides access to State.</para>
</listitem><listitem>
<para>Creates new accounts (with code being a result of VM execution).</para>
</listitem><listitem>
<para>Handles refunds entirely.</para>
</listitem><listitem>
<para>Manages the set of precompiled contracts and handles execution of messages coming to them. </para>
</listitem></itemizedlist>
</para>
</section>
</section>
<para>
Definition in file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
</section>
