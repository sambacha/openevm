<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__EVMC" xml:lang="en-US">
<title>EVMC</title>
<indexterm><primary>EVMC</primary></indexterm>
<para>

<para>EVMC: Ethereum Client-VM Connector API. </para>
 
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structevmc__bytes32">evmc_bytes32</link></para>

<para>The fixed size array of 32 bytes. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc__address">evmc_address</link></para>

<para>Big-endian 160-bit hash suitable for keeping an Ethereum address. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc__message">evmc_message</link></para>

<para>The message describing an EVM call, including a zero-depth calls from a transaction origin. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc__tx__context">evmc_tx_context</link></para>

<para>The transaction and block data for execution. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc__result">evmc_result</link></para>

<para>The EVM code execution result. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc__host__interface">evmc_host_interface</link></para>

<para>The Host interface. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc__vm">evmc_vm</link></para>

<para>The VM instance. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc__host__context">evmc_host_context</link></para>

<para>The opaque data type representing the Host execution context. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_group__EVMC_1gab420e51ab90ccc579dce3f6860b69627">EVMC_DEPRECATED</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef struct <link linkend="_structevmc__bytes32">evmc_bytes32</link> <link linkend="_group__EVMC_1gab19677b7977fc98a8d1182256486c8e9">evmc_bytes32</link></para>

<para>The fixed size array of 32 bytes. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structevmc__bytes32">evmc_bytes32</link> <link linkend="_group__EVMC_1ga260738d59f9a23d039dc7a290e0c0a3b">evmc_uint256be</link></para>

<para>The alias for <link linkend="_structevmc__bytes32">evmc_bytes32</link> to represent a big-endian 256-bit integer. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structevmc__address">evmc_address</link> <link linkend="_group__EVMC_1ga0a566da7d9e3c337abf4ef4045d8f5c5">evmc_address</link></para>

<para>Big-endian 160-bit hash suitable for keeping an Ethereum address. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structevmc__tx__context">evmc_tx_context</link>(* <link linkend="_group__EVMC_1ga7b403c029b5b9ad627ffafb8c41ac84b">evmc_get_tx_context_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context)</para>

<para>Get transaction context callback function. </para>
</listitem>
            <listitem><para>typedef <link linkend="_structevmc__bytes32">evmc_bytes32</link>(* <link linkend="_group__EVMC_1ga97c2981658d797d3031720a54740a4b3">evmc_get_block_hash_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, int64_t number)</para>

<para>Get block hash callback function. </para>
</listitem>
            <listitem><para>typedef void(* <link linkend="_group__EVMC_1ga297c7c7ca966c82296a54683143157b1">evmc_release_result_fn</link>) (const struct <link linkend="_structevmc__result">evmc_result</link> *result)</para>

<para>Releases resources assigned to an execution result. </para>
</listitem>
            <listitem><para>typedef bool(* <link linkend="_group__EVMC_1ga4c5464305402bf2a10d94bf2d828d82b">evmc_account_exists_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address)</para>

<para>Check account existence callback function. </para>
</listitem>
            <listitem><para>typedef <link linkend="_structevmc__bytes32">evmc_bytes32</link>(* <link linkend="_group__EVMC_1ga7aff77bf67e8fad5819807b8aafff7cb">evmc_get_storage_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, const <link linkend="_structevmc__bytes32">evmc_bytes32</link> *key)</para>

<para>Get storage callback function. </para>
</listitem>
            <listitem><para>typedef enum <link linkend="_group__EVMC_1gae012fd6b8e5c23806b507c2d3e9fb1aa">evmc_storage_status</link>(* <link linkend="_group__EVMC_1gaf7481ac7c3f1071d5d4d8256d0687e83">evmc_set_storage_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, const <link linkend="_structevmc__bytes32">evmc_bytes32</link> *key, const <link linkend="_structevmc__bytes32">evmc_bytes32</link> *value)</para>

<para>Set storage callback function. </para>
</listitem>
            <listitem><para>typedef <link linkend="_group__EVMC_1ga260738d59f9a23d039dc7a290e0c0a3b">evmc_uint256be</link>(* <link linkend="_group__EVMC_1ga5208ee08734b69bb0a28793f0ecfbc48">evmc_get_balance_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address)</para>

<para>Get balance callback function. </para>
</listitem>
            <listitem><para>typedef size_t(* <link linkend="_group__EVMC_1ga38e37a3a70dec828829cccb461e99de2">evmc_get_code_size_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address)</para>

<para>Get code size callback function. </para>
</listitem>
            <listitem><para>typedef <link linkend="_structevmc__bytes32">evmc_bytes32</link>(* <link linkend="_group__EVMC_1ga7971754ea6e237ffb9e9b7ab102fa16e">evmc_get_code_hash_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address)</para>

<para>Get code hash callback function. </para>
</listitem>
            <listitem><para>typedef size_t(* <link linkend="_group__EVMC_1ga7dc696d1491951200ac5dc4f852a4499">evmc_copy_code_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, size_t code_offset, uint8_t *buffer_data, size_t buffer_size)</para>

<para>Copy code callback function. </para>
</listitem>
            <listitem><para>typedef void(* <link linkend="_group__EVMC_1ga72021774388d535436b0c532f8c6de6c">evmc_selfdestruct_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, const <link linkend="_structevmc__address">evmc_address</link> *beneficiary)</para>

<para>Selfdestruct callback function. </para>
</listitem>
            <listitem><para>typedef void(* <link linkend="_group__EVMC_1gaab96621b67d653758b3da15c2b596938">evmc_emit_log_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, const uint8_t *data, size_t data_size, const <link linkend="_structevmc__bytes32">evmc_bytes32</link> topics[], size_t topics_count)</para>

<para>Log callback function. </para>
</listitem>
            <listitem><para>typedef enum <link linkend="_group__EVMC_1ga9f71195f3873f9979d81d7a5e1b3aaf0">evmc_access_status</link>(* <link linkend="_group__EVMC_1ga8eb6233115c660f8d779eb9b132e93c5">evmc_access_account_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address)</para>

<para>Access account callback function. </para>
</listitem>
            <listitem><para>typedef enum <link linkend="_group__EVMC_1ga9f71195f3873f9979d81d7a5e1b3aaf0">evmc_access_status</link>(* <link linkend="_group__EVMC_1gac33551d757c3762e4cc3dd9bdfeee356">evmc_access_storage_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, const <link linkend="_structevmc__bytes32">evmc_bytes32</link> *key)</para>

<para>Access storage callback function. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structevmc__result">evmc_result</link>(* <link linkend="_group__EVMC_1ga54f569386b52be6eee15ca9e14ed1ef8">evmc_call_fn</link>) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const struct <link linkend="_structevmc__message">evmc_message</link> *msg)</para>

<para>Pointer to the callback function supporting EVM calls. </para>
</listitem>
            <listitem><para>typedef void(* <link linkend="_group__EVMC_1ga1f54475fc7dc20a0c4d370272e39d755">evmc_destroy_fn</link>) (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm)</para>

<para>Destroys the VM instance. </para>
</listitem>
            <listitem><para>typedef enum <link linkend="_group__EVMC_1ga28d9f527bda67277bccccc100e32260a">evmc_set_option_result</link>(* <link linkend="_group__EVMC_1ga5531cee5b83d76c71b06475454f4633b">evmc_set_option_fn</link>) (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm, char const *name, char const *value)</para>

<para>Configures the VM instance. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structevmc__result">evmc_result</link>(* <link linkend="_group__EVMC_1gaed9a4ab5609b55c5e3272d6d37d84ff7">evmc_execute_fn</link>) (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm, const struct <link linkend="_structevmc__host__interface">evmc_host_interface</link> *host, struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, enum <link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link> rev, const struct <link linkend="_structevmc__message">evmc_message</link> *msg, uint8_t const *code, size_t code_size)</para>

<para>Executes the given code using the input from the message. </para>
</listitem>
            <listitem><para>typedef uint32_t <link linkend="_group__EVMC_1ga714bc8ca946adc759403fe072bdd2aa0">evmc_capabilities_flagset</link></para>

<para>Alias for unsigned integer representing a set of bit flags of EVMC capabilities. </para>
</listitem>
            <listitem><para>typedef <link linkend="_group__EVMC_1ga714bc8ca946adc759403fe072bdd2aa0">evmc_capabilities_flagset</link>(* <link linkend="_group__EVMC_1ga9bac25459c5a09d42606e7bd9320445c">evmc_get_capabilities_fn</link>) (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm)</para>

<para>Return the supported capabilities of the VM instance. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum { <link linkend="_group__EVMC_1gga06fc87d81c62e9abb8790b6e5713c55ba1db9144f8af4e62865f0c003c07a02bc">EVMC_ABI_VERSION</link> = 10
 }</para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1gab2fa68a92a6828064a61e46060abc634">evmc_call_kind</link> { 
<link linkend="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634abcf3ae29d9a88ff70b98374fc665694a">EVMC_CALL</link> = 0
, <link linkend="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634a6face22070bace91b429297e88d3ab1a">EVMC_DELEGATECALL</link> = 1
, <link linkend="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634ae9c5b431a0c823f368341c9f026642ef">EVMC_CALLCODE</link> = 2
, <link linkend="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634a1d15450429f540677caea05143344d33">EVMC_CREATE</link> = 3
, 
<link linkend="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634a9ec7e0da8dde8e9bc420d806c621b418">EVMC_CREATE2</link> = 4
 }</para>

<para>The kind of call-like instruction. </para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1ga187a3a658849da19a0c4e8f7b51fa70d">evmc_flags</link> { <link linkend="_group__EVMC_1gga187a3a658849da19a0c4e8f7b51fa70da1d8bef8b2bd39a6bd1936e87b18e95bf">EVMC_STATIC</link> = 1
 }</para>

<para>The flags for <link linkend="_structevmc__message">evmc_message</link>. </para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1ga4c0be97f333c050ff45321fcaa34d920">evmc_status_code</link> { 
<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a4bc3069fec2bab2a55355a72b7db68b7">EVMC_SUCCESS</link> = 0
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920aed5b2a4afa5a47af732569445920a4a9">EVMC_FAILURE</link> = 1
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920aed708e84d49cc1270e54ec20b0ca0a05">EVMC_REVERT</link> = 2
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920abfc47f75656c996c0b29c0553c00fc18">EVMC_OUT_OF_GAS</link> = 3
, 
<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a8ea4f35a269f5fd3a722f2054c993637">EVMC_INVALID_INSTRUCTION</link> = 4
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a443084a263a2325f1e4c629e97685367">EVMC_UNDEFINED_INSTRUCTION</link> = 5
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ae1a613949fe1c994a36488b0bc4c86c4">EVMC_STACK_OVERFLOW</link> = 6
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a640106fdec78d04a1098c512898d4efc">EVMC_STACK_UNDERFLOW</link> = 7
, 
<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a6acf000dfa802a949063a87046f4bb26">EVMC_BAD_JUMP_DESTINATION</link> = 8
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a2981ec30896486ac69bab7c0a1be591b">EVMC_INVALID_MEMORY_ACCESS</link> = 9
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ac139d631ff852379d566c8a60f86ddc0">EVMC_CALL_DEPTH_EXCEEDED</link> = 10
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a92ccaaeb3fd1ee5aa1ad022678c13bac">EVMC_STATIC_MODE_VIOLATION</link> = 11
, 
<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ab960d50047f87925e540bee6230aafb7">EVMC_PRECOMPILE_FAILURE</link> = 12
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ac0e1bf525f51da5b3d34d4f67ca549e1">EVMC_CONTRACT_VALIDATION_FAILURE</link> = 13
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a1cc537c5875de1b42aa5d556f33223d8">EVMC_ARGUMENT_OUT_OF_RANGE</link> = 14
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ac99fbd9645011663df070ae3c367eb4e">EVMC_WASM_UNREACHABLE_INSTRUCTION</link> = 15
, 
<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920aaf0c6c7a736ec498bd390884f143e57b">EVMC_WASM_TRAP</link> = 16
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a12f7061f20d077ce0d14ca86b2d5975d">EVMC_INSUFFICIENT_BALANCE</link> = 17
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920abb1dcac202eac2ed8fd3025645a2fb28">EVMC_INTERNAL_ERROR</link> = -1
, <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a2f3e0d8777f8d974ead27ae2a6eb2005">EVMC_REJECTED</link> = -2
, 
<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a63aa9b3ac3af61c39c20562509347b86">EVMC_OUT_OF_MEMORY</link> = -3
 }</para>

<para>The execution status code. </para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1gae012fd6b8e5c23806b507c2d3e9fb1aa">evmc_storage_status</link> { 
<link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaad6d527edcbe8a63edad5be80f252330c">EVMC_STORAGE_UNCHANGED</link> = 0
, <link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaaf102ce749767d5277923c221089da2c6">EVMC_STORAGE_MODIFIED</link> = 1
, <link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaa072394aca7925f8de8facf8f8a5e477c">EVMC_STORAGE_MODIFIED_AGAIN</link> = 2
, <link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaa8afd1741edf799d44264654d9f04a5a9">EVMC_STORAGE_ADDED</link> = 3
, 
<link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaae5b6ea5ec988f3b3ceb323ce3c0fa53f">EVMC_STORAGE_DELETED</link> = 4
 }</para>

<para>The effect of an attempt to modify a contract storage item. </para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1ga9f71195f3873f9979d81d7a5e1b3aaf0">evmc_access_status</link> { <link linkend="_group__EVMC_1gga9f71195f3873f9979d81d7a5e1b3aaf0a3a719b69a4c3f9d6b9913b47312b5a76">EVMC_ACCESS_COLD</link> = 0
, <link linkend="_group__EVMC_1gga9f71195f3873f9979d81d7a5e1b3aaf0a584ba0f1ab5c1e5e8a126fdcdde5d994">EVMC_ACCESS_WARM</link> = 1
 }</para>

<para>Access status per EIP-2929: Gas cost increases for state access opcodes. </para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1ga28d9f527bda67277bccccc100e32260a">evmc_set_option_result</link> { <link linkend="_group__EVMC_1gga28d9f527bda67277bccccc100e32260aa4e458cfd9a8d5da0ed5e93a3d3ad5d3b">EVMC_SET_OPTION_SUCCESS</link> = 0
, <link linkend="_group__EVMC_1gga28d9f527bda67277bccccc100e32260aa462712eea718b1a9088aaaf995bcb80e">EVMC_SET_OPTION_INVALID_NAME</link> = 1
, <link linkend="_group__EVMC_1gga28d9f527bda67277bccccc100e32260aa7be8628edb4ac9b2d195894f112d0924">EVMC_SET_OPTION_INVALID_VALUE</link> = 2
 }</para>

<para>Possible outcomes of evmc_set_option. </para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link> { 
<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a622480509359764aa2a258b074812a5f">EVMC_FRONTIER</link> = 0
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a04f0bf686d2b1c50612f9a96480f70a9">EVMC_HOMESTEAD</link> = 1
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a8305858ab32b80a6eced7bf177d6dee2">EVMC_TANGERINE_WHISTLE</link> = 2
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7abbbcae1af73ad1efc570b40bb0363879">EVMC_SPURIOUS_DRAGON</link> = 3
, 
<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7ac4b0c9cfb5d408f17255a15e26938ea6">EVMC_BYZANTIUM</link> = 4
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a7a2ed5cf3d25c8c4a68691721bb969fc">EVMC_CONSTANTINOPLE</link> = 5
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a6d913d4917e87b1fc798b450735acdeb">EVMC_PETERSBURG</link> = 6
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a5f0e287935fd0afd65afea34b51dcf8c">EVMC_ISTANBUL</link> = 7
, 
<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7af53e0cb0d793d60b5fb07c6b4c3c6ab7">EVMC_BERLIN</link> = 8
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7acfe86739fa2a0882d49cf19a94d8ee09">EVMC_LONDON</link> = 9
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7ac79d6325f9e74fd00a6b98eaea3e30a5">EVMC_SHANGHAI</link> = 10
, <link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a8b67f41f15bc079b8ad40dcd7156f576">EVMC_MAX_REVISION</link> = EVMC_SHANGHAI
, 
<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a0dd8bdd55816359290e8fb8648aeb03e">EVMC_LATEST_STABLE_REVISION</link> = EVMC_LONDON
 }</para>

<para>EVM revision. </para>
</listitem>
            <listitem><para>enum <link linkend="_group__EVMC_1ga44f9ecb88cf6422a0072936494fd6ac7">evmc_capabilities</link> { <link linkend="_group__EVMC_1gga44f9ecb88cf6422a0072936494fd6ac7a36fd3cfe936b9525eed7f88a7b43a2a8">EVMC_CAPABILITY_EVM1</link> = (1u &lt;&lt; 0)
, <link linkend="_group__EVMC_1gga44f9ecb88cf6422a0072936494fd6ac7af1240f950b5b9ca4369bcac424443e54">EVMC_CAPABILITY_EWASM</link> = (1u &lt;&lt; 1)
, <link linkend="_group__EVMC_1gga44f9ecb88cf6422a0072936494fd6ac7a43ea2aa7b099a2d67bc53c118ff3683d">EVMC_CAPABILITY_PRECOMPILES</link> = (1u &lt;&lt; 2)
 }</para>

<para>Possible capabilities of a VM. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structevmc__vm">evmc_vm</link> * <link linkend="_group__EVMC_1ga4ba5aae5d0250d9c4f6987a78602e795">evmc_create_example_vm</link> (void)</para>

<para>Example of a function creating an instance of an example EVM implementation. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>EVMC: Ethereum Client-VM Connector API. </para>

<para><formalpara><title>Copyright</title>

<para>Copyright 2016-2019 The EVMC Authors. Licensed under the Apache License, Version 2.0.</para>
</formalpara>
</para>
<section xml:id="_group__EVMC_1autotoc_md1">
<title>Terms</title>

<para><orderedlist>
<listitem>
<para><emphasis role="bold">VM</emphasis> – An Ethereum Virtual Machine instance/implementation.</para>
</listitem><listitem>
<para><emphasis role="bold">Host</emphasis> – An entity controlling the VM. The Host requests code execution and responses to VM queries by callback functions. This usually represents an Ethereum Client.</para>
</listitem></orderedlist>
</para>
</section>
<section xml:id="_group__EVMC_1autotoc_md2">
<title>Responsibilities</title>
<section xml:id="_group__EVMC_1autotoc_md3">
<title>VM</title>

<para><itemizedlist>
<listitem>
<para>Executes the code (obviously).</para>
</listitem><listitem>
<para>Calculates the running gas cost and manages the gas counter except the refund counter.</para>
</listitem><listitem>
<para>Controls the call depth, including the exceptional termination of execution in case the maximum depth is reached.</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_group__EVMC_1autotoc_md4">
<title>Host</title>

<para><itemizedlist>
<listitem>
<para>Provides access to State.</para>
</listitem><listitem>
<para>Creates new accounts (with code being a result of VM execution).</para>
</listitem><listitem>
<para>Handles refunds entirely.</para>
</listitem><listitem>
<para>Manages the set of precompiled contracts and handles execution of messages coming to them. </para>
</listitem></itemizedlist>
</para>
</section>
</section>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_group__EVMC_1gab420e51ab90ccc579dce3f6860b69627"/><section>
    <title>EVMC_DEPRECATED</title>
<indexterm><primary>EVMC_DEPRECATED</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_DEPRECATED</secondary></indexterm>
<para><computeroutput>#define EVMC_DEPRECATED</computeroutput></para><para>
Definition at line <link linkend="_evmc_8h_source_1l00023">23</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_group__EVMC_1ga8eb6233115c660f8d779eb9b132e93c5"/><section>
    <title>evmc_access_account_fn</title>
<indexterm><primary>evmc_access_account_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_access_account_fn</secondary></indexterm>
<para><computeroutput>typedef enum <link linkend="_group__EVMC_1ga9f71195f3873f9979d81d7a5e1b3aaf0">evmc_access_status</link>(* evmc_access_account_fn) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address)</computeroutput></para><para>

<para>Access account callback function. </para>
</para>

<para>This callback function is used by a VM to add the given address to accessed_addresses substate (EIP-2929).</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>context</entry><entry>
<para>The Host execution context. </para>
</entry>
                            </row>
                            <row>
<entry>address</entry><entry>
<para>The address of the account. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>EVMC_ACCESS_WARM if accessed_addresses already contained the address or EVMC_ACCESS_COLD otherwise. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00647">647</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1gac33551d757c3762e4cc3dd9bdfeee356"/><section>
    <title>evmc_access_storage_fn</title>
<indexterm><primary>evmc_access_storage_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_access_storage_fn</secondary></indexterm>
<para><computeroutput>typedef enum <link linkend="_group__EVMC_1ga9f71195f3873f9979d81d7a5e1b3aaf0">evmc_access_status</link>(* evmc_access_storage_fn) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, const <link linkend="_structevmc__bytes32">evmc_bytes32</link> *key)</computeroutput></para><para>

<para>Access storage callback function. </para>
</para>

<para>This callback function is used by a VM to add the given account storage entry to accessed_storage_keys substate (EIP-2929).</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>context</entry><entry>
<para>The Host execution context. </para>
</entry>
                            </row>
                            <row>
<entry>address</entry><entry>
<para>The address of the account. </para>
</entry>
                            </row>
                            <row>
<entry>key</entry><entry>
<para>The index of the account&apos;s storage entry. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>EVMC_ACCESS_WARM if accessed_storage_keys already contained the key or EVMC_ACCESS_COLD otherwise. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00647">647</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga4c5464305402bf2a10d94bf2d828d82b"/><section>
    <title>evmc_account_exists_fn</title>
<indexterm><primary>evmc_account_exists_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_account_exists_fn</secondary></indexterm>
<para><computeroutput>typedef bool(* evmc_account_exists_fn) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address)</computeroutput></para><para>

<para>Check account existence callback function. </para>
</para>

<para>This callback function is used by the VM to check if there exists an account at given address. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>context</entry><entry>
<para>The pointer to the Host execution context. </para>
</entry>
                            </row>
                            <row>
<entry>address</entry><entry>
<para>The address of the account the query is about. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if exists, false otherwise. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00480">480</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga0a566da7d9e3c337abf4ef4045d8f5c5"/><section>
    <title>evmc_address</title>
<indexterm><primary>evmc_address</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_address</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_structevmc__address">evmc_address</link> <link linkend="_structevmc__address">evmc_address</link></computeroutput></para><para>

<para>Big-endian 160-bit hash suitable for keeping an Ethereum address. </para>
</para>
</section>
<anchor xml:id="_group__EVMC_1gab19677b7977fc98a8d1182256486c8e9"/><section>
    <title>evmc_bytes32</title>
<indexterm><primary>evmc_bytes32</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_bytes32</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_structevmc__bytes32">evmc_bytes32</link> <link linkend="_structevmc__bytes32">evmc_bytes32</link></computeroutput></para><para>

<para>The fixed size array of 32 bytes. </para>
</para>

<para>32 bytes of data capable of storing e.g. 256-bit hashes. </para>
</section>
<anchor xml:id="_group__EVMC_1ga54f569386b52be6eee15ca9e14ed1ef8"/><section>
    <title>evmc_call_fn</title>
<indexterm><primary>evmc_call_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_call_fn</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_structevmc__result">evmc_result</link>(* evmc_call_fn) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const struct <link linkend="_structevmc__message">evmc_message</link> *msg)</computeroutput></para><para>

<para>Pointer to the callback function supporting EVM calls. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>context</entry><entry>
<para>The pointer to the Host execution context. </para>
</entry>
                            </row>
                            <row>
<entry>msg</entry><entry>
<para>The call parameters. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The result of the call. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00647">647</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga714bc8ca946adc759403fe072bdd2aa0"/><section>
    <title>evmc_capabilities_flagset</title>
<indexterm><primary>evmc_capabilities_flagset</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_capabilities_flagset</secondary></indexterm>
<para><computeroutput>typedef uint32_t <link linkend="_group__EVMC_1ga714bc8ca946adc759403fe072bdd2aa0">evmc_capabilities_flagset</link></computeroutput></para><para>

<para>Alias for unsigned integer representing a set of bit flags of EVMC capabilities. </para>
</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__EVMC_1ga44f9ecb88cf6422a0072936494fd6ac7">evmc_capabilities</link> </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00960">960</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga7dc696d1491951200ac5dc4f852a4499"/><section>
    <title>evmc_copy_code_fn</title>
<indexterm><primary>evmc_copy_code_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_copy_code_fn</secondary></indexterm>
<para><computeroutput>typedef size_t(* evmc_copy_code_fn) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, size_t code_offset, uint8_t *buffer_data, size_t buffer_size)</computeroutput></para><para>

<para>Copy code callback function. </para>
</para>

<para>This callback function is used by an EVM to request a copy of the code of the given account to the memory buffer provided by the EVM. The Client MUST copy the requested code, starting with the given offset, to the provided memory buffer up to the size of the buffer or the size of the code, whichever is smaller.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>context</entry><entry>
<para>The pointer to the Host execution context. See <link linkend="_structevmc__host__context">evmc_host_context</link>. </para>
</entry>
                            </row>
                            <row>
<entry>address</entry><entry>
<para>The address of the account. </para>
</entry>
                            </row>
                            <row>
<entry>code_offset</entry><entry>
<para>The offset of the code to copy. </para>
</entry>
                            </row>
                            <row>
<entry>buffer_data</entry><entry>
<para>The pointer to the memory buffer allocated by the EVM to store a copy of the requested code. </para>
</entry>
                            </row>
                            <row>
<entry>buffer_size</entry><entry>
<para>The size of the memory buffer. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The number of bytes copied to the buffer by the Client. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00614">614</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga1f54475fc7dc20a0c4d370272e39d755"/><section>
    <title>evmc_destroy_fn</title>
<indexterm><primary>evmc_destroy_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_destroy_fn</secondary></indexterm>
<para><computeroutput>typedef void(* evmc_destroy_fn) (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm)</computeroutput></para><para>

<para>Destroys the VM instance. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>vm</entry><entry>
<para>The VM instance to be destroyed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00772">772</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1gaab96621b67d653758b3da15c2b596938"/><section>
    <title>evmc_emit_log_fn</title>
<indexterm><primary>evmc_emit_log_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_emit_log_fn</secondary></indexterm>
<para><computeroutput>typedef void(* evmc_emit_log_fn) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, const uint8_t *data, size_t data_size, const <link linkend="_structevmc__bytes32">evmc_bytes32</link> topics[], size_t topics_count)</computeroutput></para><para>

<para>Log callback function. </para>
</para>

<para>This callback function is used by an EVM to inform about a LOG that happened during an EVM bytecode execution.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>context</entry><entry>
<para>The pointer to the Host execution context. See <link linkend="_structevmc__host__context">evmc_host_context</link>. </para>
</entry>
                            </row>
                            <row>
<entry>address</entry><entry>
<para>The address of the contract that generated the log. </para>
</entry>
                            </row>
                            <row>
<entry>data</entry><entry>
<para>The pointer to unindexed data attached to the log. </para>
</entry>
                            </row>
                            <row>
<entry>data_size</entry><entry>
<para>The length of the data. </para>
</entry>
                            </row>
                            <row>
<entry>topics</entry><entry>
<para>The pointer to the array of topics attached to the log. </para>
</entry>
                            </row>
                            <row>
<entry>topics_count</entry><entry>
<para>The number of the topics. Valid values are between 0 and 4 inclusively. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00647">647</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1gaed9a4ab5609b55c5e3272d6d37d84ff7"/><section>
    <title>evmc_execute_fn</title>
<indexterm><primary>evmc_execute_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_execute_fn</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_structevmc__result">evmc_result</link>(* evmc_execute_fn) (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm, const struct <link linkend="_structevmc__host__interface">evmc_host_interface</link> *host, struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, enum <link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link> rev, const struct <link linkend="_structevmc__message">evmc_message</link> *msg, uint8_t const  *code, size_t code_size)</computeroutput></para><para>

<para>Executes the given code using the input from the message. </para>
</para>

<para>This function MAY be invoked multiple times for a single VM instance.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>vm</entry><entry>
<para>The VM instance. This argument MUST NOT be NULL. </para>
</entry>
                            </row>
                            <row>
<entry>host</entry><entry>
<para>The Host interface. This argument MUST NOT be NULL unless the <computeroutput>vm</computeroutput> has the <link linkend="_group__EVMC_1gga44f9ecb88cf6422a0072936494fd6ac7a43ea2aa7b099a2d67bc53c118ff3683d">EVMC_CAPABILITY_PRECOMPILES</link> capability. </para>
</entry>
                            </row>
                            <row>
<entry>context</entry><entry>
<para>The opaque pointer to the Host execution context. This argument MAY be NULL. The VM MUST pass the same pointer to the methods of the <computeroutput>host</computeroutput> interface. The VM MUST NOT dereference the pointer. </para>
</entry>
                            </row>
                            <row>
<entry>rev</entry><entry>
<para>The requested EVM specification revision. </para>
</entry>
                            </row>
                            <row>
<entry>msg</entry><entry>
<para>The call parameters. See <link linkend="_structevmc__message">evmc_message</link>. This argument MUST NOT be NULL. </para>
</entry>
                            </row>
                            <row>
<entry>code</entry><entry>
<para>The reference to the code to be executed. This argument MAY be NULL. </para>
</entry>
                            </row>
                            <row>
<entry>code_size</entry><entry>
<para>The length of the code. If <computeroutput>code</computeroutput> is NULL this argument MUST be 0. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The execution result. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00772">772</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga5208ee08734b69bb0a28793f0ecfbc48"/><section>
    <title>evmc_get_balance_fn</title>
<indexterm><primary>evmc_get_balance_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_get_balance_fn</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_group__EVMC_1ga260738d59f9a23d039dc7a290e0c0a3b">evmc_uint256be</link>(* evmc_get_balance_fn) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address)</computeroutput></para><para>

<para>Get balance callback function. </para>
</para>

<para>This callback function is used by a VM to query the balance of the given account.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>context</entry><entry>
<para>The pointer to the Host execution context. </para>
</entry>
                            </row>
                            <row>
<entry>address</entry><entry>
<para>The address of the account. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The balance of the given account or 0 if the account does not exist. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00567">567</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga97c2981658d797d3031720a54740a4b3"/><section>
    <title>evmc_get_block_hash_fn</title>
<indexterm><primary>evmc_get_block_hash_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_get_block_hash_fn</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structevmc__bytes32">evmc_bytes32</link>(* evmc_get_block_hash_fn) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, int64_t number)</computeroutput></para><para>

<para>Get block hash callback function. </para>
</para>

<para>This callback function is used by a VM to query the hash of the header of the given block. If the information about the requested block is not available, then this is signalled by returning null bytes.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>context</entry><entry>
<para>The pointer to the Host execution context. </para>
</entry>
                            </row>
                            <row>
<entry>number</entry><entry>
<para>The block number. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The block hash or null bytes if the information about the block is not available. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00237">237</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga9bac25459c5a09d42606e7bd9320445c"/><section>
    <title>evmc_get_capabilities_fn</title>
<indexterm><primary>evmc_get_capabilities_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_get_capabilities_fn</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_group__EVMC_1ga714bc8ca946adc759403fe072bdd2aa0">evmc_capabilities_flagset</link>(* evmc_get_capabilities_fn) (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm)</computeroutput></para><para>

<para>Return the supported capabilities of the VM instance. </para>
</para>

<para>This function MAY be invoked multiple times for a single VM instance, and its value MAY be influenced by calls to <link linkend="_structevmc__vm_1a20fd85c822ba5f3296206fc8fe3e90b2">evmc_vm::set_option</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>vm</entry><entry>
<para>The VM instance. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The supported capabilities of the VM. </para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_group__EVMC_1ga44f9ecb88cf6422a0072936494fd6ac7">evmc_capabilities</link>. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00971">971</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga7971754ea6e237ffb9e9b7ab102fa16e"/><section>
    <title>evmc_get_code_hash_fn</title>
<indexterm><primary>evmc_get_code_hash_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_get_code_hash_fn</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structevmc__bytes32">evmc_bytes32</link>(* evmc_get_code_hash_fn) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address)</computeroutput></para><para>

<para>Get code hash callback function. </para>
</para>

<para>This callback function is used by a VM to get the keccak256 hash of the code stored in the account at the given address. For existing accounts not having a code, this function returns keccak256 hash of empty data.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>context</entry><entry>
<para>The pointer to the Host execution context. </para>
</entry>
                            </row>
                            <row>
<entry>address</entry><entry>
<para>The address of the account. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The hash of the code in the account or null bytes if the account does not exist. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00594">594</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga38e37a3a70dec828829cccb461e99de2"/><section>
    <title>evmc_get_code_size_fn</title>
<indexterm><primary>evmc_get_code_size_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_get_code_size_fn</secondary></indexterm>
<para><computeroutput>typedef size_t(* evmc_get_code_size_fn) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address)</computeroutput></para><para>

<para>Get code size callback function. </para>
</para>

<para>This callback function is used by a VM to get the size of the code stored in the account at the given address.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>context</entry><entry>
<para>The pointer to the Host execution context. </para>
</entry>
                            </row>
                            <row>
<entry>address</entry><entry>
<para>The address of the account. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The size of the code in the account or 0 if the account does not exist. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00580">580</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga7aff77bf67e8fad5819807b8aafff7cb"/><section>
    <title>evmc_get_storage_fn</title>
<indexterm><primary>evmc_get_storage_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_get_storage_fn</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structevmc__bytes32">evmc_bytes32</link>(* evmc_get_storage_fn) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, const <link linkend="_structevmc__bytes32">evmc_bytes32</link> *key)</computeroutput></para><para>

<para>Get storage callback function. </para>
</para>

<para>This callback function is used by a VM to query the given account storage entry.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>context</entry><entry>
<para>The Host execution context. </para>
</entry>
                            </row>
                            <row>
<entry>address</entry><entry>
<para>The address of the account. </para>
</entry>
                            </row>
                            <row>
<entry>key</entry><entry>
<para>The index of the account&apos;s storage entry. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The storage value at the given storage key or null bytes if the account does not exist. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00494">494</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga7b403c029b5b9ad627ffafb8c41ac84b"/><section>
    <title>evmc_get_tx_context_fn</title>
<indexterm><primary>evmc_get_tx_context_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_get_tx_context_fn</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_structevmc__tx__context">evmc_tx_context</link>(* evmc_get_tx_context_fn) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context)</computeroutput></para><para>

<para>Get transaction context callback function. </para>
</para>

<para>This callback function is used by an EVM to retrieve the transaction and block context.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>context</entry><entry>
<para>The pointer to the Host execution context. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The transaction context. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00065">65</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga297c7c7ca966c82296a54683143157b1"/><section>
    <title>evmc_release_result_fn</title>
<indexterm><primary>evmc_release_result_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_release_result_fn</secondary></indexterm>
<para><computeroutput>typedef void(* evmc_release_result_fn) (const struct <link linkend="_structevmc__result">evmc_result</link> *result)</computeroutput></para><para>

<para>Releases resources assigned to an execution result. </para>
</para>

<para>This function releases memory (and other resources, if any) assigned to the specified execution result making the result object invalid.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>result</entry><entry>
<para>The execution result which resources are to be released. The result itself it not modified by this function, but becomes invalid and user MUST discard it as well. This MUST NOT be NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>The result is passed by pointer to avoid (shallow) copy of the <link linkend="_structevmc__result">evmc_result</link> struct. Think of this as the best possible C language approximation to passing objects by reference. </para>
</note>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00388">388</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga72021774388d535436b0c532f8c6de6c"/><section>
    <title>evmc_selfdestruct_fn</title>
<indexterm><primary>evmc_selfdestruct_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_selfdestruct_fn</secondary></indexterm>
<para><computeroutput>typedef void(* evmc_selfdestruct_fn) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, const <link linkend="_structevmc__address">evmc_address</link> *beneficiary)</computeroutput></para><para>

<para>Selfdestruct callback function. </para>
</para>

<para>This callback function is used by an EVM to SELFDESTRUCT given contract. The execution of the contract will not be stopped, that is up to the EVM.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>context</entry><entry>
<para>The pointer to the Host execution context. See <link linkend="_structevmc__host__context">evmc_host_context</link>. </para>
</entry>
                            </row>
                            <row>
<entry>address</entry><entry>
<para>The address of the contract to be selfdestructed. </para>
</entry>
                            </row>
                            <row>
<entry>beneficiary</entry><entry>
<para>The address where the remaining ETH is going to be transferred. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00630">630</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga5531cee5b83d76c71b06475454f4633b"/><section>
    <title>evmc_set_option_fn</title>
<indexterm><primary>evmc_set_option_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_set_option_fn</secondary></indexterm>
<para><computeroutput>typedef enum <link linkend="_group__EVMC_1ga28d9f527bda67277bccccc100e32260a">evmc_set_option_result</link>(* evmc_set_option_fn) (struct <link linkend="_structevmc__vm">evmc_vm</link> *vm, char const  *name, char const  *value)</computeroutput></para><para>

<para>Configures the VM instance. </para>
</para>

<para>Allows modifying options of the VM instance. Options:<itemizedlist>
<listitem>
<para>code cache behavior: on, off, read-only, ...</para>
</listitem><listitem>
<para>optimizations,</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>vm</entry><entry>
<para>The VM instance to be configured. </para>
</entry>
                            </row>
                            <row>
<entry>name</entry><entry>
<para>The option name. NULL-terminated string. Cannot be NULL. </para>
</entry>
                            </row>
                            <row>
<entry>value</entry><entry>
<para>The new option value. NULL-terminated string. Cannot be NULL. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The outcome of the operation. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00772">772</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1gaf7481ac7c3f1071d5d4d8256d0687e83"/><section>
    <title>evmc_set_storage_fn</title>
<indexterm><primary>evmc_set_storage_fn</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_set_storage_fn</secondary></indexterm>
<para><computeroutput>typedef enum <link linkend="_group__EVMC_1gae012fd6b8e5c23806b507c2d3e9fb1aa">evmc_storage_status</link>(* evmc_set_storage_fn) (struct <link linkend="_structevmc__host__context">evmc_host_context</link> *context, const <link linkend="_structevmc__address">evmc_address</link> *address, const <link linkend="_structevmc__bytes32">evmc_bytes32</link> *key, const <link linkend="_structevmc__bytes32">evmc_bytes32</link> *value)</computeroutput></para><para>

<para>Set storage callback function. </para>
</para>

<para>This callback function is used by a VM to update the given account storage entry. The VM MUST make sure that the account exists. This requirement is only a formality because VM implementations only modify storage of the account of the current execution context (i.e. referenced by <link linkend="_structevmc__message_1a63643daa5f3a30df28d42360a20e39e2">evmc_message::recipient</link>).</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>context</entry><entry>
<para>The pointer to the Host execution context. </para>
</entry>
                            </row>
                            <row>
<entry>address</entry><entry>
<para>The address of the account. </para>
</entry>
                            </row>
                            <row>
<entry>key</entry><entry>
<para>The index of the storage entry. </para>
</entry>
                            </row>
                            <row>
<entry>value</entry><entry>
<para>The value to be stored. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The effect on the storage item. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00494">494</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
<anchor xml:id="_group__EVMC_1ga260738d59f9a23d039dc7a290e0c0a3b"/><section>
    <title>evmc_uint256be</title>
<indexterm><primary>evmc_uint256be</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_uint256be</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_structevmc__bytes32">evmc_bytes32</link> <link linkend="_group__EVMC_1ga260738d59f9a23d039dc7a290e0c0a3b">evmc_uint256be</link></computeroutput></para><para>

<para>The alias for <link linkend="_structevmc__bytes32">evmc_bytes32</link> to represent a big-endian 256-bit integer. </para>
</para>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00065">65</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_group__EVMC_1ga06fc87d81c62e9abb8790b6e5713c55b"/><section>
    <title>anonymous enum</title>
<para><computeroutput>anonymous enum</computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>EVMC_ABI_VERSION</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_ABI_VERSION</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga06fc87d81c62e9abb8790b6e5713c55ba1db9144f8af4e62865f0c003c07a02bc"/>EVMC_ABI_VERSION</entry><entry>
<para>The EVMC ABI version number of the interface declared in this file. </para>

<para>The EVMC ABI version always equals the major version number of the EVMC project. The Host SHOULD check if the ABI versions match when dynamically loading VMs.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_index_1versioning">Versioning</link> </para>
</formalpara>
</para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00037">37</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_group__EVMC_1l00038"/>00038 {
<anchor xml:id="_group__EVMC_1l00047"/>00047 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga06fc87d81c62e9abb8790b6e5713c55ba1db9144f8af4e62865f0c003c07a02bc">EVMC_ABI_VERSION</link>&#32;=&#32;10
<anchor xml:id="_group__EVMC_1l00048"/>00048 };
</programlisting></section>
<anchor xml:id="_group__EVMC_1ga9f71195f3873f9979d81d7a5e1b3aaf0"/><section>
    <title>evmc_access_status</title>
<indexterm><primary>evmc_access_status</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_access_status</secondary></indexterm>
<para><computeroutput>enum <link linkend="_group__EVMC_1ga9f71195f3873f9979d81d7a5e1b3aaf0">evmc_access_status</link></computeroutput></para><para>

<para>Access status per EIP-2929: Gas cost increases for state access opcodes. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>EVMC_ACCESS_COLD</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_ACCESS_COLD</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga9f71195f3873f9979d81d7a5e1b3aaf0a3a719b69a4c3f9d6b9913b47312b5a76"/>EVMC_ACCESS_COLD</entry><entry>
<para>The entry hasn&apos;t been accessed before – it&apos;s the first access. </para>
</entry></row><row><entry><indexterm><primary>EVMC_ACCESS_WARM</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_ACCESS_WARM</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga9f71195f3873f9979d81d7a5e1b3aaf0a584ba0f1ab5c1e5e8a126fdcdde5d994"/>EVMC_ACCESS_WARM</entry><entry>
<para>The entry is already in accessed_addresses or accessed_storage_keys. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00657">657</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_group__EVMC_1l00658"/>00658 {
<anchor xml:id="_group__EVMC_1l00662"/>00662 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga9f71195f3873f9979d81d7a5e1b3aaf0a3a719b69a4c3f9d6b9913b47312b5a76">EVMC_ACCESS_COLD</link>&#32;=&#32;0,
<anchor xml:id="_group__EVMC_1l00663"/>00663 
<anchor xml:id="_group__EVMC_1l00667"/>00667 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga9f71195f3873f9979d81d7a5e1b3aaf0a584ba0f1ab5c1e5e8a126fdcdde5d994">EVMC_ACCESS_WARM</link>&#32;=&#32;1
<anchor xml:id="_group__EVMC_1l00668"/>00668 };
</programlisting></section>
<anchor xml:id="_group__EVMC_1gab2fa68a92a6828064a61e46060abc634"/><section>
    <title>evmc_call_kind</title>
<indexterm><primary>evmc_call_kind</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_call_kind</secondary></indexterm>
<para><computeroutput>enum <link linkend="_group__EVMC_1gab2fa68a92a6828064a61e46060abc634">evmc_call_kind</link></computeroutput></para><para>

<para>The kind of call-like instruction. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>EVMC_CALL</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_CALL</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634abcf3ae29d9a88ff70b98374fc665694a"/>EVMC_CALL</entry><entry>
<para>Request CALL. </para>
</entry></row><row><entry><indexterm><primary>EVMC_DELEGATECALL</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_DELEGATECALL</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634a6face22070bace91b429297e88d3ab1a"/>EVMC_DELEGATECALL</entry><entry>
<para>Request DELEGATECALL. </para>

<para>Valid since Homestead. The value param ignored. </para>
</entry></row><row><entry><indexterm><primary>EVMC_CALLCODE</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_CALLCODE</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634ae9c5b431a0c823f368341c9f026642ef"/>EVMC_CALLCODE</entry><entry>
<para>Request CALLCODE. </para>
</entry></row><row><entry><indexterm><primary>EVMC_CREATE</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_CREATE</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634a1d15450429f540677caea05143344d33"/>EVMC_CREATE</entry><entry>
<para>Request CREATE. </para>
</entry></row><row><entry><indexterm><primary>EVMC_CREATE2</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_CREATE2</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634a9ec7e0da8dde8e9bc420d806c621b418"/>EVMC_CREATE2</entry><entry>
<para>Request CREATE2. </para>

<para>Valid since Constantinople. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00075">75</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_group__EVMC_1l00076"/>00076 {
<anchor xml:id="_group__EVMC_1l00077"/>00077 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634abcf3ae29d9a88ff70b98374fc665694a">EVMC_CALL</link>&#32;=&#32;0,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_group__EVMC_1l00078"/>00078 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634a6face22070bace91b429297e88d3ab1a">EVMC_DELEGATECALL</link>&#32;=&#32;1,&#32;
<anchor xml:id="_group__EVMC_1l00080"/>00080 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634ae9c5b431a0c823f368341c9f026642ef">EVMC_CALLCODE</link>&#32;=&#32;2,&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_group__EVMC_1l00081"/>00081 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634a1d15450429f540677caea05143344d33">EVMC_CREATE</link>&#32;=&#32;3,&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_group__EVMC_1l00082"/>00082 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggab2fa68a92a6828064a61e46060abc634a9ec7e0da8dde8e9bc420d806c621b418">EVMC_CREATE2</link>&#32;=&#32;4&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_group__EVMC_1l00083"/>00083 };
</programlisting></section>
<anchor xml:id="_group__EVMC_1ga44f9ecb88cf6422a0072936494fd6ac7"/><section>
    <title>evmc_capabilities</title>
<indexterm><primary>evmc_capabilities</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_capabilities</secondary></indexterm>
<para><computeroutput>enum <link linkend="_group__EVMC_1ga44f9ecb88cf6422a0072936494fd6ac7">evmc_capabilities</link></computeroutput></para><para>

<para>Possible capabilities of a VM. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>EVMC_CAPABILITY_EVM1</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_CAPABILITY_EVM1</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga44f9ecb88cf6422a0072936494fd6ac7a36fd3cfe936b9525eed7f88a7b43a2a8"/>EVMC_CAPABILITY_EVM1</entry><entry>
<para>The VM is capable of executing EVM1 bytecode. </para>
</entry></row><row><entry><indexterm><primary>EVMC_CAPABILITY_EWASM</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_CAPABILITY_EWASM</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga44f9ecb88cf6422a0072936494fd6ac7af1240f950b5b9ca4369bcac424443e54"/>EVMC_CAPABILITY_EWASM</entry><entry>
<para>The VM is capable of executing ewasm bytecode. </para>
</entry></row><row><entry><indexterm><primary>EVMC_CAPABILITY_PRECOMPILES</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_CAPABILITY_PRECOMPILES</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga44f9ecb88cf6422a0072936494fd6ac7a43ea2aa7b099a2d67bc53c118ff3683d"/>EVMC_CAPABILITY_PRECOMPILES</entry><entry>
<para>The VM is capable of executing the precompiled contracts defined for the range of code addresses. </para>

<para>The EIP-1352 (<link xlink:href="https://eips.ethereum.org/EIPS/eip-1352">https://eips.ethereum.org/EIPS/eip-1352</link>) specifies the range 0x000...0000 - 0x000...ffff of addresses reserved for precompiled and system contracts.</para>

<para>This capability is <emphasis role="bold">experimental</emphasis> and MAY be removed without notice. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00930">930</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_group__EVMC_1l00931"/>00931 {
<anchor xml:id="_group__EVMC_1l00935"/>00935 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga44f9ecb88cf6422a0072936494fd6ac7a36fd3cfe936b9525eed7f88a7b43a2a8">EVMC_CAPABILITY_EVM1</link>&#32;=&#32;(1u&#32;&lt;&lt;&#32;0),
<anchor xml:id="_group__EVMC_1l00936"/>00936 
<anchor xml:id="_group__EVMC_1l00940"/>00940 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga44f9ecb88cf6422a0072936494fd6ac7af1240f950b5b9ca4369bcac424443e54">EVMC_CAPABILITY_EWASM</link>&#32;=&#32;(1u&#32;&lt;&lt;&#32;1),
<anchor xml:id="_group__EVMC_1l00941"/>00941 
<anchor xml:id="_group__EVMC_1l00952"/>00952 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga44f9ecb88cf6422a0072936494fd6ac7a43ea2aa7b099a2d67bc53c118ff3683d">EVMC_CAPABILITY_PRECOMPILES</link>&#32;=&#32;(1u&#32;&lt;&lt;&#32;2)
<anchor xml:id="_group__EVMC_1l00953"/>00953 };
</programlisting></section>
<anchor xml:id="_group__EVMC_1ga187a3a658849da19a0c4e8f7b51fa70d"/><section>
    <title>evmc_flags</title>
<indexterm><primary>evmc_flags</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_flags</secondary></indexterm>
<para><computeroutput>enum <link linkend="_group__EVMC_1ga187a3a658849da19a0c4e8f7b51fa70d">evmc_flags</link></computeroutput></para><para>

<para>The flags for <link linkend="_structevmc__message">evmc_message</link>. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>EVMC_STATIC</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_STATIC</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga187a3a658849da19a0c4e8f7b51fa70da1d8bef8b2bd39a6bd1936e87b18e95bf"/>EVMC_STATIC</entry><entry>
<para>Static call mode. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00086">86</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_group__EVMC_1l00087"/>00087 {
<anchor xml:id="_group__EVMC_1l00088"/>00088 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga187a3a658849da19a0c4e8f7b51fa70da1d8bef8b2bd39a6bd1936e87b18e95bf">EVMC_STATIC</link>&#32;=&#32;1&#32;
<anchor xml:id="_group__EVMC_1l00089"/>00089 };
</programlisting></section>
<anchor xml:id="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7"/><section>
    <title>evmc_revision</title>
<indexterm><primary>evmc_revision</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_revision</secondary></indexterm>
<para><computeroutput>enum <link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link></computeroutput></para><para>

<para>EVM revision. </para>
</para>

<para>The revision of the EVM specification based on the Ethereum upgrade / hard fork codenames. </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>EVMC_FRONTIER</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_FRONTIER</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a622480509359764aa2a258b074812a5f"/>EVMC_FRONTIER</entry><entry>
<para>The Frontier revision. </para>

<para>The one Ethereum launched with. </para>
</entry></row><row><entry><indexterm><primary>EVMC_HOMESTEAD</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_HOMESTEAD</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a04f0bf686d2b1c50612f9a96480f70a9"/>EVMC_HOMESTEAD</entry><entry>
<para>The Homestead revision. </para>

<para><link xlink:href="https://eips.ethereum.org/EIPS/eip-606">https://eips.ethereum.org/EIPS/eip-606</link> </para>
</entry></row><row><entry><indexterm><primary>EVMC_TANGERINE_WHISTLE</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_TANGERINE_WHISTLE</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a8305858ab32b80a6eced7bf177d6dee2"/>EVMC_TANGERINE_WHISTLE</entry><entry>
<para>The Tangerine Whistle revision. </para>

<para><link xlink:href="https://eips.ethereum.org/EIPS/eip-608">https://eips.ethereum.org/EIPS/eip-608</link> </para>
</entry></row><row><entry><indexterm><primary>EVMC_SPURIOUS_DRAGON</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_SPURIOUS_DRAGON</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7abbbcae1af73ad1efc570b40bb0363879"/>EVMC_SPURIOUS_DRAGON</entry><entry>
<para>The Spurious Dragon revision. </para>

<para><link xlink:href="https://eips.ethereum.org/EIPS/eip-607">https://eips.ethereum.org/EIPS/eip-607</link> </para>
</entry></row><row><entry><indexterm><primary>EVMC_BYZANTIUM</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_BYZANTIUM</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7ac4b0c9cfb5d408f17255a15e26938ea6"/>EVMC_BYZANTIUM</entry><entry>
<para>The Byzantium revision. </para>

<para><link xlink:href="https://eips.ethereum.org/EIPS/eip-609">https://eips.ethereum.org/EIPS/eip-609</link> </para>
</entry></row><row><entry><indexterm><primary>EVMC_CONSTANTINOPLE</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_CONSTANTINOPLE</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a7a2ed5cf3d25c8c4a68691721bb969fc"/>EVMC_CONSTANTINOPLE</entry><entry>
<para>The Constantinople revision. </para>

<para><link xlink:href="https://eips.ethereum.org/EIPS/eip-1013">https://eips.ethereum.org/EIPS/eip-1013</link> </para>
</entry></row><row><entry><indexterm><primary>EVMC_PETERSBURG</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_PETERSBURG</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a6d913d4917e87b1fc798b450735acdeb"/>EVMC_PETERSBURG</entry><entry>
<para>The Petersburg revision. </para>

<para>Other names: Constantinople2, ConstantinopleFix.</para>

<para><link xlink:href="https://eips.ethereum.org/EIPS/eip-1716">https://eips.ethereum.org/EIPS/eip-1716</link> </para>
</entry></row><row><entry><indexterm><primary>EVMC_ISTANBUL</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_ISTANBUL</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a5f0e287935fd0afd65afea34b51dcf8c"/>EVMC_ISTANBUL</entry><entry>
<para>The Istanbul revision. </para>

<para><link xlink:href="https://eips.ethereum.org/EIPS/eip-1679">https://eips.ethereum.org/EIPS/eip-1679</link> </para>
</entry></row><row><entry><indexterm><primary>EVMC_BERLIN</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_BERLIN</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7af53e0cb0d793d60b5fb07c6b4c3c6ab7"/>EVMC_BERLIN</entry><entry>
<para>The Berlin revision. </para>

<para><link xlink:href="https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/berlin.md">https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/berlin.md</link> </para>
</entry></row><row><entry><indexterm><primary>EVMC_LONDON</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_LONDON</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7acfe86739fa2a0882d49cf19a94d8ee09"/>EVMC_LONDON</entry><entry>
<para>The London revision. </para>

<para><link xlink:href="https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md">https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md</link> </para>
</entry></row><row><entry><indexterm><primary>EVMC_SHANGHAI</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_SHANGHAI</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7ac79d6325f9e74fd00a6b98eaea3e30a5"/>EVMC_SHANGHAI</entry><entry>
<para>The Shanghai revision. </para>

<para><link xlink:href="https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md">https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md</link> </para>
</entry></row><row><entry><indexterm><primary>EVMC_MAX_REVISION</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_MAX_REVISION</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a8b67f41f15bc079b8ad40dcd7156f576"/>EVMC_MAX_REVISION</entry><entry>
<para>The maximum EVM revision supported. </para>
</entry></row><row><entry><indexterm><primary>EVMC_LATEST_STABLE_REVISION</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_LATEST_STABLE_REVISION</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a0dd8bdd55816359290e8fb8648aeb03e"/>EVMC_LATEST_STABLE_REVISION</entry><entry>
<para>The latest known EVM revision with finalized specification. </para>

<para>This is handy for EVM tools to always use the latest revision available. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00808">808</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_group__EVMC_1l00809"/>00809 {
<anchor xml:id="_group__EVMC_1l00815"/>00815 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a622480509359764aa2a258b074812a5f">EVMC_FRONTIER</link>&#32;=&#32;0,
<anchor xml:id="_group__EVMC_1l00816"/>00816 
<anchor xml:id="_group__EVMC_1l00822"/>00822 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a04f0bf686d2b1c50612f9a96480f70a9">EVMC_HOMESTEAD</link>&#32;=&#32;1,
<anchor xml:id="_group__EVMC_1l00823"/>00823 
<anchor xml:id="_group__EVMC_1l00829"/>00829 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a8305858ab32b80a6eced7bf177d6dee2">EVMC_TANGERINE_WHISTLE</link>&#32;=&#32;2,
<anchor xml:id="_group__EVMC_1l00830"/>00830 
<anchor xml:id="_group__EVMC_1l00836"/>00836 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7abbbcae1af73ad1efc570b40bb0363879">EVMC_SPURIOUS_DRAGON</link>&#32;=&#32;3,
<anchor xml:id="_group__EVMC_1l00837"/>00837 
<anchor xml:id="_group__EVMC_1l00843"/>00843 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7ac4b0c9cfb5d408f17255a15e26938ea6">EVMC_BYZANTIUM</link>&#32;=&#32;4,
<anchor xml:id="_group__EVMC_1l00844"/>00844 
<anchor xml:id="_group__EVMC_1l00850"/>00850 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a7a2ed5cf3d25c8c4a68691721bb969fc">EVMC_CONSTANTINOPLE</link>&#32;=&#32;5,
<anchor xml:id="_group__EVMC_1l00851"/>00851 
<anchor xml:id="_group__EVMC_1l00859"/>00859 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a6d913d4917e87b1fc798b450735acdeb">EVMC_PETERSBURG</link>&#32;=&#32;6,
<anchor xml:id="_group__EVMC_1l00860"/>00860 
<anchor xml:id="_group__EVMC_1l00866"/>00866 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a5f0e287935fd0afd65afea34b51dcf8c">EVMC_ISTANBUL</link>&#32;=&#32;7,
<anchor xml:id="_group__EVMC_1l00867"/>00867 
<anchor xml:id="_group__EVMC_1l00873"/>00873 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7af53e0cb0d793d60b5fb07c6b4c3c6ab7">EVMC_BERLIN</link>&#32;=&#32;8,
<anchor xml:id="_group__EVMC_1l00874"/>00874 
<anchor xml:id="_group__EVMC_1l00880"/>00880 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7acfe86739fa2a0882d49cf19a94d8ee09">EVMC_LONDON</link>&#32;=&#32;9,
<anchor xml:id="_group__EVMC_1l00881"/>00881 
<anchor xml:id="_group__EVMC_1l00887"/>00887 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7ac79d6325f9e74fd00a6b98eaea3e30a5">EVMC_SHANGHAI</link>&#32;=&#32;10,
<anchor xml:id="_group__EVMC_1l00888"/>00888 
<anchor xml:id="_group__EVMC_1l00890"/>00890 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a8b67f41f15bc079b8ad40dcd7156f576">EVMC_MAX_REVISION</link>&#32;=&#32;<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7ac79d6325f9e74fd00a6b98eaea3e30a5">EVMC_SHANGHAI</link>,
<anchor xml:id="_group__EVMC_1l00891"/>00891 
<anchor xml:id="_group__EVMC_1l00897"/>00897 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7a0dd8bdd55816359290e8fb8648aeb03e">EVMC_LATEST_STABLE_REVISION</link>&#32;=&#32;<link linkend="_group__EVMC_1ggae5759b1590071966ccf6a505b52a0ef7acfe86739fa2a0882d49cf19a94d8ee09">EVMC_LONDON</link>
<anchor xml:id="_group__EVMC_1l00898"/>00898 };
</programlisting></section>
<anchor xml:id="_group__EVMC_1ga28d9f527bda67277bccccc100e32260a"/><section>
    <title>evmc_set_option_result</title>
<indexterm><primary>evmc_set_option_result</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_set_option_result</secondary></indexterm>
<para><computeroutput>enum <link linkend="_group__EVMC_1ga28d9f527bda67277bccccc100e32260a">evmc_set_option_result</link></computeroutput></para><para>

<para>Possible outcomes of evmc_set_option. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>EVMC_SET_OPTION_SUCCESS</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_SET_OPTION_SUCCESS</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga28d9f527bda67277bccccc100e32260aa4e458cfd9a8d5da0ed5e93a3d3ad5d3b"/>EVMC_SET_OPTION_SUCCESS</entry><entry></entry></row><row><entry><indexterm><primary>EVMC_SET_OPTION_INVALID_NAME</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_SET_OPTION_INVALID_NAME</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga28d9f527bda67277bccccc100e32260aa462712eea718b1a9088aaaf995bcb80e"/>EVMC_SET_OPTION_INVALID_NAME</entry><entry></entry></row><row><entry><indexterm><primary>EVMC_SET_OPTION_INVALID_VALUE</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_SET_OPTION_INVALID_VALUE</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga28d9f527bda67277bccccc100e32260aa7be8628edb4ac9b2d195894f112d0924"/>EVMC_SET_OPTION_INVALID_VALUE</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00777">777</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_group__EVMC_1l00778"/>00778 {
<anchor xml:id="_group__EVMC_1l00779"/>00779 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga28d9f527bda67277bccccc100e32260aa4e458cfd9a8d5da0ed5e93a3d3ad5d3b">EVMC_SET_OPTION_SUCCESS</link>&#32;=&#32;0,
<anchor xml:id="_group__EVMC_1l00780"/>00780 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga28d9f527bda67277bccccc100e32260aa462712eea718b1a9088aaaf995bcb80e">EVMC_SET_OPTION_INVALID_NAME</link>&#32;=&#32;1,
<anchor xml:id="_group__EVMC_1l00781"/>00781 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga28d9f527bda67277bccccc100e32260aa7be8628edb4ac9b2d195894f112d0924">EVMC_SET_OPTION_INVALID_VALUE</link>&#32;=&#32;2
<anchor xml:id="_group__EVMC_1l00782"/>00782 };
</programlisting></section>
<anchor xml:id="_group__EVMC_1ga4c0be97f333c050ff45321fcaa34d920"/><section>
    <title>evmc_status_code</title>
<indexterm><primary>evmc_status_code</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_status_code</secondary></indexterm>
<para><computeroutput>enum <link linkend="_group__EVMC_1ga4c0be97f333c050ff45321fcaa34d920">evmc_status_code</link></computeroutput></para><para>

<para>The execution status code. </para>
</para>

<para>Successful execution is represented by <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a4bc3069fec2bab2a55355a72b7db68b7">EVMC_SUCCESS</link> having value 0.</para>

<para>Positive values represent failures defined by VM specifications with generic <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920aed5b2a4afa5a47af732569445920a4a9">EVMC_FAILURE</link> code of value 1.</para>

<para>Status codes with negative values represent VM internal errors not provided by EVM specifications. These errors MUST not be passed back to the caller. They MAY be handled by the Client in predefined manner (see e.g. <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a2f3e0d8777f8d974ead27ae2a6eb2005">EVMC_REJECTED</link>), otherwise internal errors are not recoverable. The generic representant of errors is <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920abb1dcac202eac2ed8fd3025645a2fb28">EVMC_INTERNAL_ERROR</link> but an EVM implementation MAY return negative status codes that are not defined in the EVMC documentation.</para>

<para><note><title>Note</title>

<para>In case new status codes are needed, please create an issue or pull request in the EVMC repository (<link xlink:href="https://github.com/ethereum/evmc">https://github.com/ethereum/evmc</link>). </para>
</note>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>EVMC_SUCCESS</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_SUCCESS</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a4bc3069fec2bab2a55355a72b7db68b7"/>EVMC_SUCCESS</entry><entry>
<para>Execution finished with success. </para>
</entry></row><row><entry><indexterm><primary>EVMC_FAILURE</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_FAILURE</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920aed5b2a4afa5a47af732569445920a4a9"/>EVMC_FAILURE</entry><entry>
<para>Generic execution failure. </para>
</entry></row><row><entry><indexterm><primary>EVMC_REVERT</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_REVERT</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920aed708e84d49cc1270e54ec20b0ca0a05"/>EVMC_REVERT</entry><entry>
<para>Execution terminated with REVERT opcode. </para>

<para>In this case the amount of gas left MAY be non-zero and additional output data MAY be provided in <link linkend="_structevmc__result">evmc_result</link>. </para>
</entry></row><row><entry><indexterm><primary>EVMC_OUT_OF_GAS</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_OUT_OF_GAS</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920abfc47f75656c996c0b29c0553c00fc18"/>EVMC_OUT_OF_GAS</entry><entry>
<para>The execution has run out of gas. </para>
</entry></row><row><entry><indexterm><primary>EVMC_INVALID_INSTRUCTION</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_INVALID_INSTRUCTION</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a8ea4f35a269f5fd3a722f2054c993637"/>EVMC_INVALID_INSTRUCTION</entry><entry>
<para>The designated INVALID instruction has been hit during execution. </para>

<para>The EIP-141 (<link xlink:href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-141.md">https://github.com/ethereum/EIPs/blob/master/EIPS/eip-141.md</link>) defines the instruction 0xfe as INVALID instruction to indicate execution abortion coming from high-level languages. This status code is reported in case this INVALID instruction has been encountered. </para>
</entry></row><row><entry><indexterm><primary>EVMC_UNDEFINED_INSTRUCTION</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_UNDEFINED_INSTRUCTION</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a443084a263a2325f1e4c629e97685367"/>EVMC_UNDEFINED_INSTRUCTION</entry><entry>
<para>An undefined instruction has been encountered. </para>
</entry></row><row><entry><indexterm><primary>EVMC_STACK_OVERFLOW</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_STACK_OVERFLOW</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ae1a613949fe1c994a36488b0bc4c86c4"/>EVMC_STACK_OVERFLOW</entry><entry>
<para>The execution has attempted to put more items on the EVM stack than the specified limit. </para>
</entry></row><row><entry><indexterm><primary>EVMC_STACK_UNDERFLOW</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_STACK_UNDERFLOW</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a640106fdec78d04a1098c512898d4efc"/>EVMC_STACK_UNDERFLOW</entry><entry>
<para>Execution of an opcode has required more items on the EVM stack. </para>
</entry></row><row><entry><indexterm><primary>EVMC_BAD_JUMP_DESTINATION</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_BAD_JUMP_DESTINATION</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a6acf000dfa802a949063a87046f4bb26"/>EVMC_BAD_JUMP_DESTINATION</entry><entry>
<para>Execution has violated the jump destination restrictions. </para>
</entry></row><row><entry><indexterm><primary>EVMC_INVALID_MEMORY_ACCESS</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_INVALID_MEMORY_ACCESS</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a2981ec30896486ac69bab7c0a1be591b"/>EVMC_INVALID_MEMORY_ACCESS</entry><entry>
<para>Tried to read outside memory bounds. </para>

<para>An example is RETURNDATACOPY reading past the available buffer. </para>
</entry></row><row><entry><indexterm><primary>EVMC_CALL_DEPTH_EXCEEDED</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_CALL_DEPTH_EXCEEDED</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ac139d631ff852379d566c8a60f86ddc0"/>EVMC_CALL_DEPTH_EXCEEDED</entry><entry>
<para>Call depth has exceeded the limit (if any) </para>
</entry></row><row><entry><indexterm><primary>EVMC_STATIC_MODE_VIOLATION</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_STATIC_MODE_VIOLATION</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a92ccaaeb3fd1ee5aa1ad022678c13bac"/>EVMC_STATIC_MODE_VIOLATION</entry><entry>
<para>Tried to execute an operation which is restricted in static mode. </para>
</entry></row><row><entry><indexterm><primary>EVMC_PRECOMPILE_FAILURE</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_PRECOMPILE_FAILURE</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ab960d50047f87925e540bee6230aafb7"/>EVMC_PRECOMPILE_FAILURE</entry><entry>
<para>A call to a precompiled or system contract has ended with a failure. </para>

<para>An example: elliptic curve functions handed invalid EC points. </para>
</entry></row><row><entry><indexterm><primary>EVMC_CONTRACT_VALIDATION_FAILURE</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_CONTRACT_VALIDATION_FAILURE</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ac0e1bf525f51da5b3d34d4f67ca549e1"/>EVMC_CONTRACT_VALIDATION_FAILURE</entry><entry>
<para>Contract validation has failed (e.g. </para>

<para>due to EVM 1.5 jump validity, Casper&apos;s purity checker or ewasm contract rules). </para>
</entry></row><row><entry><indexterm><primary>EVMC_ARGUMENT_OUT_OF_RANGE</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_ARGUMENT_OUT_OF_RANGE</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a1cc537c5875de1b42aa5d556f33223d8"/>EVMC_ARGUMENT_OUT_OF_RANGE</entry><entry>
<para>An argument to a state accessing method has a value outside of the accepted range of values. </para>
</entry></row><row><entry><indexterm><primary>EVMC_WASM_UNREACHABLE_INSTRUCTION</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_WASM_UNREACHABLE_INSTRUCTION</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ac99fbd9645011663df070ae3c367eb4e"/>EVMC_WASM_UNREACHABLE_INSTRUCTION</entry><entry>
<para>A WebAssembly <computeroutput>unreachable</computeroutput> instruction has been hit during execution. </para>
</entry></row><row><entry><indexterm><primary>EVMC_WASM_TRAP</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_WASM_TRAP</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920aaf0c6c7a736ec498bd390884f143e57b"/>EVMC_WASM_TRAP</entry><entry>
<para>A WebAssembly trap has been hit during execution. </para>

<para>This can be for many reasons, including division by zero, validation errors, etc. </para>
</entry></row><row><entry><indexterm><primary>EVMC_INSUFFICIENT_BALANCE</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_INSUFFICIENT_BALANCE</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a12f7061f20d077ce0d14ca86b2d5975d"/>EVMC_INSUFFICIENT_BALANCE</entry><entry>
<para>The caller does not have enough funds for value transfer. </para>
</entry></row><row><entry><indexterm><primary>EVMC_INTERNAL_ERROR</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_INTERNAL_ERROR</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920abb1dcac202eac2ed8fd3025645a2fb28"/>EVMC_INTERNAL_ERROR</entry><entry>
<para>EVM implementation generic internal error. </para>
</entry></row><row><entry><indexterm><primary>EVMC_REJECTED</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_REJECTED</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a2f3e0d8777f8d974ead27ae2a6eb2005"/>EVMC_REJECTED</entry><entry>
<para>The execution of the given code and/or message has been rejected by the EVM implementation. </para>

<para>This error SHOULD be used to signal that the EVM is not able to or willing to execute the given code type or message. If an EVM returns the <link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a2f3e0d8777f8d974ead27ae2a6eb2005">EVMC_REJECTED</link> status code, the Client MAY try to execute it in other EVM implementation. For example, the Client tries running a code in the EVM 1.5. If the code is not supported there, the execution falls back to the EVM 1.0. </para>
</entry></row><row><entry><indexterm><primary>EVMC_OUT_OF_MEMORY</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_OUT_OF_MEMORY</secondary></indexterm>
<anchor xml:id="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a63aa9b3ac3af61c39c20562509347b86"/>EVMC_OUT_OF_MEMORY</entry><entry>
<para>The VM failed to allocate the amount of memory needed for execution. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00259">259</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_group__EVMC_1l00260"/>00260 {
<anchor xml:id="_group__EVMC_1l00262"/>00262 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a4bc3069fec2bab2a55355a72b7db68b7">EVMC_SUCCESS</link>&#32;=&#32;0,
<anchor xml:id="_group__EVMC_1l00263"/>00263 
<anchor xml:id="_group__EVMC_1l00265"/>00265 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920aed5b2a4afa5a47af732569445920a4a9">EVMC_FAILURE</link>&#32;=&#32;1,
<anchor xml:id="_group__EVMC_1l00266"/>00266 
<anchor xml:id="_group__EVMC_1l00273"/>00273 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920aed708e84d49cc1270e54ec20b0ca0a05">EVMC_REVERT</link>&#32;=&#32;2,
<anchor xml:id="_group__EVMC_1l00274"/>00274 
<anchor xml:id="_group__EVMC_1l00276"/>00276 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920abfc47f75656c996c0b29c0553c00fc18">EVMC_OUT_OF_GAS</link>&#32;=&#32;3,
<anchor xml:id="_group__EVMC_1l00277"/>00277 
<anchor xml:id="_group__EVMC_1l00286"/>00286 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a8ea4f35a269f5fd3a722f2054c993637">EVMC_INVALID_INSTRUCTION</link>&#32;=&#32;4,
<anchor xml:id="_group__EVMC_1l00287"/>00287 
<anchor xml:id="_group__EVMC_1l00289"/>00289 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a443084a263a2325f1e4c629e97685367">EVMC_UNDEFINED_INSTRUCTION</link>&#32;=&#32;5,
<anchor xml:id="_group__EVMC_1l00290"/>00290 
<anchor xml:id="_group__EVMC_1l00295"/>00295 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ae1a613949fe1c994a36488b0bc4c86c4">EVMC_STACK_OVERFLOW</link>&#32;=&#32;6,
<anchor xml:id="_group__EVMC_1l00296"/>00296 
<anchor xml:id="_group__EVMC_1l00298"/>00298 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a640106fdec78d04a1098c512898d4efc">EVMC_STACK_UNDERFLOW</link>&#32;=&#32;7,
<anchor xml:id="_group__EVMC_1l00299"/>00299 
<anchor xml:id="_group__EVMC_1l00301"/>00301 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a6acf000dfa802a949063a87046f4bb26">EVMC_BAD_JUMP_DESTINATION</link>&#32;=&#32;8,
<anchor xml:id="_group__EVMC_1l00302"/>00302 
<anchor xml:id="_group__EVMC_1l00308"/>00308 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a2981ec30896486ac69bab7c0a1be591b">EVMC_INVALID_MEMORY_ACCESS</link>&#32;=&#32;9,
<anchor xml:id="_group__EVMC_1l00309"/>00309 
<anchor xml:id="_group__EVMC_1l00311"/>00311 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ac139d631ff852379d566c8a60f86ddc0">EVMC_CALL_DEPTH_EXCEEDED</link>&#32;=&#32;10,
<anchor xml:id="_group__EVMC_1l00312"/>00312 
<anchor xml:id="_group__EVMC_1l00314"/>00314 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a92ccaaeb3fd1ee5aa1ad022678c13bac">EVMC_STATIC_MODE_VIOLATION</link>&#32;=&#32;11,
<anchor xml:id="_group__EVMC_1l00315"/>00315 
<anchor xml:id="_group__EVMC_1l00321"/>00321 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ab960d50047f87925e540bee6230aafb7">EVMC_PRECOMPILE_FAILURE</link>&#32;=&#32;12,
<anchor xml:id="_group__EVMC_1l00322"/>00322 
<anchor xml:id="_group__EVMC_1l00327"/>00327 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ac0e1bf525f51da5b3d34d4f67ca549e1">EVMC_CONTRACT_VALIDATION_FAILURE</link>&#32;=&#32;13,
<anchor xml:id="_group__EVMC_1l00328"/>00328 
<anchor xml:id="_group__EVMC_1l00333"/>00333 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a1cc537c5875de1b42aa5d556f33223d8">EVMC_ARGUMENT_OUT_OF_RANGE</link>&#32;=&#32;14,
<anchor xml:id="_group__EVMC_1l00334"/>00334 
<anchor xml:id="_group__EVMC_1l00338"/>00338 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920ac99fbd9645011663df070ae3c367eb4e">EVMC_WASM_UNREACHABLE_INSTRUCTION</link>&#32;=&#32;15,
<anchor xml:id="_group__EVMC_1l00339"/>00339 
<anchor xml:id="_group__EVMC_1l00344"/>00344 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920aaf0c6c7a736ec498bd390884f143e57b">EVMC_WASM_TRAP</link>&#32;=&#32;16,
<anchor xml:id="_group__EVMC_1l00345"/>00345 
<anchor xml:id="_group__EVMC_1l00347"/>00347 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a12f7061f20d077ce0d14ca86b2d5975d">EVMC_INSUFFICIENT_BALANCE</link>&#32;=&#32;17,
<anchor xml:id="_group__EVMC_1l00348"/>00348 
<anchor xml:id="_group__EVMC_1l00350"/>00350 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920abb1dcac202eac2ed8fd3025645a2fb28">EVMC_INTERNAL_ERROR</link>&#32;=&#32;-1,
<anchor xml:id="_group__EVMC_1l00351"/>00351 
<anchor xml:id="_group__EVMC_1l00363"/>00363 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a2f3e0d8777f8d974ead27ae2a6eb2005">EVMC_REJECTED</link>&#32;=&#32;-2,
<anchor xml:id="_group__EVMC_1l00364"/>00364 
<anchor xml:id="_group__EVMC_1l00366"/>00366 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920a63aa9b3ac3af61c39c20562509347b86">EVMC_OUT_OF_MEMORY</link>&#32;=&#32;-3
<anchor xml:id="_group__EVMC_1l00367"/>00367 };
</programlisting></section>
<anchor xml:id="_group__EVMC_1gae012fd6b8e5c23806b507c2d3e9fb1aa"/><section>
    <title>evmc_storage_status</title>
<indexterm><primary>evmc_storage_status</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_storage_status</secondary></indexterm>
<para><computeroutput>enum <link linkend="_group__EVMC_1gae012fd6b8e5c23806b507c2d3e9fb1aa">evmc_storage_status</link></computeroutput></para><para>

<para>The effect of an attempt to modify a contract storage item. </para>
</para>

<para>For the purpose of explaining the meaning of each element, the following notation is used:<itemizedlist>
<listitem>
<para>0 is zero value,</para>
</listitem><listitem>
<para>X != 0 (X is any value other than 0),</para>
</listitem><listitem>
<para>Y != X, Y != 0 (Y is any value other than X and 0),</para>
</listitem><listitem>
<para>Z != Y (Z is any value other than Y),</para>
</listitem><listitem>
<para>the &quot;-&gt;&quot; means the change from one value to another. </para>
</listitem></itemizedlist>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>EVMC_STORAGE_UNCHANGED</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_STORAGE_UNCHANGED</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaad6d527edcbe8a63edad5be80f252330c"/>EVMC_STORAGE_UNCHANGED</entry><entry>
<para>The value of a storage item has been left unchanged: 0 -&gt; 0 and X -&gt; X. </para>
</entry></row><row><entry><indexterm><primary>EVMC_STORAGE_MODIFIED</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_STORAGE_MODIFIED</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaaf102ce749767d5277923c221089da2c6"/>EVMC_STORAGE_MODIFIED</entry><entry>
<para>The value of a storage item has been modified: X -&gt; Y. </para>
</entry></row><row><entry><indexterm><primary>EVMC_STORAGE_MODIFIED_AGAIN</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_STORAGE_MODIFIED_AGAIN</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaa072394aca7925f8de8facf8f8a5e477c"/>EVMC_STORAGE_MODIFIED_AGAIN</entry><entry>
<para>A storage item has been modified after being modified before: X -&gt; Y -&gt; Z. </para>
</entry></row><row><entry><indexterm><primary>EVMC_STORAGE_ADDED</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_STORAGE_ADDED</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaa8afd1741edf799d44264654d9f04a5a9"/>EVMC_STORAGE_ADDED</entry><entry>
<para>A new storage item has been added: 0 -&gt; X. </para>
</entry></row><row><entry><indexterm><primary>EVMC_STORAGE_DELETED</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>EVMC_STORAGE_DELETED</secondary></indexterm>
<anchor xml:id="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaae5b6ea5ec988f3b3ceb323ce3c0fa53f"/>EVMC_STORAGE_DELETED</entry><entry>
<para>A storage item has been deleted: X -&gt; 0. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_evmc_8h_source_1l00510">510</link> of file <link linkend="_evmc_8h_source">evmc.h</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_group__EVMC_1l00511"/>00511 {
<anchor xml:id="_group__EVMC_1l00515"/>00515 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaad6d527edcbe8a63edad5be80f252330c">EVMC_STORAGE_UNCHANGED</link>&#32;=&#32;0,
<anchor xml:id="_group__EVMC_1l00516"/>00516 
<anchor xml:id="_group__EVMC_1l00520"/>00520 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaaf102ce749767d5277923c221089da2c6">EVMC_STORAGE_MODIFIED</link>&#32;=&#32;1,
<anchor xml:id="_group__EVMC_1l00521"/>00521 
<anchor xml:id="_group__EVMC_1l00525"/>00525 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaa072394aca7925f8de8facf8f8a5e477c">EVMC_STORAGE_MODIFIED_AGAIN</link>&#32;=&#32;2,
<anchor xml:id="_group__EVMC_1l00526"/>00526 
<anchor xml:id="_group__EVMC_1l00530"/>00530 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaa8afd1741edf799d44264654d9f04a5a9">EVMC_STORAGE_ADDED</link>&#32;=&#32;3,
<anchor xml:id="_group__EVMC_1l00531"/>00531 
<anchor xml:id="_group__EVMC_1l00535"/>00535 &#32;&#32;&#32;&#32;<link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaae5b6ea5ec988f3b3ceb323ce3c0fa53f">EVMC_STORAGE_DELETED</link>&#32;=&#32;4
<anchor xml:id="_group__EVMC_1l00536"/>00536 };
</programlisting></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group__EVMC_1ga4ba5aae5d0250d9c4f6987a78602e795"/><section>
    <title>evmc_create_example_vm()</title>
<indexterm><primary>evmc_create_example_vm</primary><secondary>EVMC</secondary></indexterm>
<indexterm><primary>EVMC</primary><secondary>evmc_create_example_vm</secondary></indexterm>
<para><computeroutput>struct <link linkend="_structevmc__vm">evmc_vm</link> * evmc_create_example_vm (void )</computeroutput></para><para>

<para>Example of a function creating an instance of an example EVM implementation. </para>
</para>

<para>Each EVM implementation MUST provide a function returning an EVM instance. The function SHOULD be named <computeroutput>evmc_create_&lt;vm-name&gt;(void)</computeroutput>. If the VM name contains hyphens replaces them with underscores in the function names.</para>

<para><formalpara>
<title>Binaries naming convention</title>
<para>For VMs distributed as shared libraries, the name of the library SHOULD match the VM name. The convetional library filename prefixes and extensions SHOULD be ignored by the Client. For example, the shared library with the &quot;beta-interpreter&quot; implementation may be named <computeroutput>libbeta-interpreter.so</computeroutput>.</para>
</formalpara>
<formalpara><title>Returns</title>

<para>The VM instance or NULL indicating instance creation failure. </para>
</formalpara>
</para>
</section>
</section>
</section>
