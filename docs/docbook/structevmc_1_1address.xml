<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structevmc_1_1address" xml:lang="en-US">
<title>evmc::address Struct Reference</title>
<indexterm><primary>evmc::address</primary></indexterm>
<para>

<para>The big-endian 160-bit hash suitable for keeping an Ethereum address. </para>
 
</para>
<para>
<computeroutput>#include &lt;evmc.hpp&gt;</computeroutput>
</para>
Inheritance diagram for evmc::address:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structevmc_1_1address__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for evmc::address:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structevmc_1_1address__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>constexpr <link linkend="_structevmc_1_1address_1a4efaacdd8a0de3a347b845a5b134bd47">address</link> (<link linkend="_structevmc__address">evmc_address</link> init={}) noexcept</para>

<para>Default and converting constructor. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_structevmc_1_1address_1aa58c7cf24b9fd2419a287e0329d75af2">address</link> (uint64_t v) noexcept</para>

<para>Converting constructor from unsigned integer value. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_structevmc_1_1address_1a25c8ad356e94fd5ec048a0b37e3de0b0">operator bool</link> () const noexcept</para>

<para>Explicit operator converting to bool. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>The big-endian 160-bit hash suitable for keeping an Ethereum address. </para>



<para>This type wraps C <link linkend="_structevmc__address">evmc_address</link> to make sure objects of this type are always initialized. </para>
<para>
Definition at line <link linkend="_evmc_8hpp_source_1l00025">25</link> of file <link linkend="_evmc_8hpp_source">evmc.hpp</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_structevmc_1_1address_1a4efaacdd8a0de3a347b845a5b134bd47"/><section>
    <title>address()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>address</primary><secondary>evmc::address</secondary></indexterm>
<indexterm><primary>evmc::address</primary><secondary>address</secondary></indexterm>
<para><computeroutput>constexpr evmc::address::address (<link linkend="_structevmc__address">evmc_address</link> init = <computeroutput>{}</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Default and converting constructor. </para>
</para>

<para>Initializes bytes to zeros if not other <computeroutput>init</computeroutput> value provided. </para>
<para>
Definition at line <link linkend="_evmc_8hpp_source_1l00030">30</link> of file <link linkend="_evmc_8hpp_source">evmc.hpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_structevmc_1_1address_1l00030"/>00030 {})&#32;<emphasis role="keyword">noexcept</emphasis>&#32;:&#32;<link linkend="_structevmc__address">evmc_address</link>{init}&#32;{}
</programlisting></section>
<anchor xml:id="_structevmc_1_1address_1aa58c7cf24b9fd2419a287e0329d75af2"/><section>
    <title>address()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>address</primary><secondary>evmc::address</secondary></indexterm>
<indexterm><primary>evmc::address</primary><secondary>address</secondary></indexterm>
<para><computeroutput>constexpr evmc::address::address (uint64_t v)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Converting constructor from unsigned integer value. </para>
</para>

<para>This constructor assigns the <computeroutput>v</computeroutput> value to the last 8 bytes [12:19] in big-endian order. </para>
<para>
Definition at line <link linkend="_evmc_8hpp_source_1l00036">36</link> of file <link linkend="_evmc_8hpp_source">evmc.hpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_structevmc_1_1address_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structevmc__address">evmc_address</link>{{0,
<anchor xml:id="_structevmc_1_1address_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,
<anchor xml:id="_structevmc_1_1address_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,
<anchor xml:id="_structevmc_1_1address_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,
<anchor xml:id="_structevmc_1_1address_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,
<anchor xml:id="_structevmc_1_1address_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,
<anchor xml:id="_structevmc_1_1address_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,
<anchor xml:id="_structevmc_1_1address_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,
<anchor xml:id="_structevmc_1_1address_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,
<anchor xml:id="_structevmc_1_1address_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,
<anchor xml:id="_structevmc_1_1address_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,
<anchor xml:id="_structevmc_1_1address_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,
<anchor xml:id="_structevmc_1_1address_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint8_t<emphasis role="keyword">&gt;</emphasis>(v&#32;&gt;&gt;&#32;56),
<anchor xml:id="_structevmc_1_1address_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint8_t<emphasis role="keyword">&gt;</emphasis>(v&#32;&gt;&gt;&#32;48),
<anchor xml:id="_structevmc_1_1address_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint8_t<emphasis role="keyword">&gt;</emphasis>(v&#32;&gt;&gt;&#32;40),
<anchor xml:id="_structevmc_1_1address_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint8_t<emphasis role="keyword">&gt;</emphasis>(v&#32;&gt;&gt;&#32;32),
<anchor xml:id="_structevmc_1_1address_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint8_t<emphasis role="keyword">&gt;</emphasis>(v&#32;&gt;&gt;&#32;24),
<anchor xml:id="_structevmc_1_1address_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint8_t<emphasis role="keyword">&gt;</emphasis>(v&#32;&gt;&gt;&#32;16),
<anchor xml:id="_structevmc_1_1address_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint8_t<emphasis role="keyword">&gt;</emphasis>(v&#32;&gt;&gt;&#32;8),
<anchor xml:id="_structevmc_1_1address_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint8_t<emphasis role="keyword">&gt;</emphasis>(v&#32;&gt;&gt;&#32;0)}}
<anchor xml:id="_structevmc_1_1address_1l00057"/>00057 &#32;&#32;&#32;&#32;{}
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_structevmc_1_1address_1a25c8ad356e94fd5ec048a0b37e3de0b0"/><section>
    <title>operator bool()</title>
<indexterm><primary>operator bool</primary><secondary>evmc::address</secondary></indexterm>
<indexterm><primary>evmc::address</primary><secondary>operator bool</secondary></indexterm>
<para><computeroutput>constexpr evmc::address::operator bool ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Explicit operator converting to bool. </para>
</para>
<para>
Definition at line <link linkend="_evmc_8hpp_source_1l00256">256</link> of file <link linkend="_evmc_8hpp_source">evmc.hpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_structevmc_1_1address_1l00257"/>00257 {
<anchor xml:id="_structevmc_1_1address_1l00258"/>00258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_namespaceevmc_1afc53d0e831bda94fbf31a64d224c8d24">is_zero</link>(*<emphasis role="keyword">this</emphasis>);
<anchor xml:id="_structevmc_1_1address_1l00259"/>00259 }
</programlisting>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structevmc_1_1address_a25c8ad356e94fd5ec048a0b37e3de0b0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<para>
The documentation for this struct was generated from the following file:</para>
include/evmc/<link linkend="_evmc_8hpp">evmc.hpp</link></section>
</section>
