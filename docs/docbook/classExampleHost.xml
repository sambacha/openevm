<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classExampleHost" xml:lang="en-US">
<title>ExampleHost Class Reference</title>
<indexterm><primary>ExampleHost</primary></indexterm>
Inheritance diagram for ExampleHost:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classExampleHost__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for ExampleHost:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classExampleHost__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classExampleHost_1a53770f0a3ca09715b0306bdc9f0304b7">ExampleHost</link> ()=default</para>
</listitem>
            <listitem><para><link linkend="_classExampleHost_1a6d2f475d7f9dde90a8a0bc18d13d8e3e">ExampleHost</link> (<link linkend="_structevmc__tx__context">evmc_tx_context</link> &amp;_tx_context) noexcept</para>
</listitem>
            <listitem><para><link linkend="_classExampleHost_1a92bfbfcc308a397e27dbc34520030614">ExampleHost</link> (<link linkend="_structevmc__tx__context">evmc_tx_context</link> &amp;_tx_context, <link linkend="_namespaceevmc_1a85ff0436efd1c2e8b065f73b361269e1">evmc::accounts</link> &amp;_accounts) noexcept</para>
</listitem>
            <listitem><para>bool <link linkend="_classExampleHost_1ac37de9a8465e23879f64c8ada27b1285">account_exists</link> (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp;addr) const noexcept final</para>

<para>Check account existence callback function. </para>
</listitem>
            <listitem><para><link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> <link linkend="_classExampleHost_1afeed7489e0128d0df0f398744c57b14a">get_storage</link> (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp;addr, const <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> &amp;key) const noexcept final</para>

<para>Get storage callback function. </para>
</listitem>
            <listitem><para><link linkend="_group__EVMC_1gae012fd6b8e5c23806b507c2d3e9fb1aa">evmc_storage_status</link> <link linkend="_classExampleHost_1a2e2c1d74614e7c863b501e2e1e56e622">set_storage</link> (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp;addr, const <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> &amp;key, const <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> &amp;value) noexcept final</para>

<para>Set storage callback function. </para>
</listitem>
            <listitem><para><link linkend="_namespaceevmc_1a92bc6b73f1ce3a2b2eea018cf902c4da">evmc::uint256be</link> <link linkend="_classExampleHost_1affae69006394fc7c455cb629eb160df9">get_balance</link> (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp;addr) const noexcept final</para>

<para>Get balance callback function. </para>
</listitem>
            <listitem><para>size_t <link linkend="_classExampleHost_1a7e5aacf59d0d072d8ebbce74ba3cf513">get_code_size</link> (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp;addr) const noexcept final</para>

<para>Get code size callback function. </para>
</listitem>
            <listitem><para><link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> <link linkend="_classExampleHost_1a588763d53930877e2aac165fe8253bf2">get_code_hash</link> (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp;addr) const noexcept final</para>

<para>Get code hash callback function. </para>
</listitem>
            <listitem><para>size_t <link linkend="_classExampleHost_1a9d20a3ad0ef146bd51b99a60c4aabc56">copy_code</link> (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp;addr, size_t code_offset, uint8_t *buffer_data, size_t buffer_size) const noexcept final</para>

<para>Copy code callback function. </para>
</listitem>
            <listitem><para>void <link linkend="_classExampleHost_1a9d2ce6481950dfc3d30fdd9e80665c14">selfdestruct</link> (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp;addr, const <link linkend="_structevmc_1_1address">evmc::address</link> &amp;beneficiary) noexcept final</para>

<para>Selfdestruct callback function. </para>
</listitem>
            <listitem><para><link linkend="_classevmc_1_1result">evmc::result</link> <link linkend="_classExampleHost_1ad76f578cc300dfb59e3f7eb561e7112e">call</link> (const <link linkend="_structevmc__message">evmc_message</link> &amp;msg) noexcept final</para>

<para>Call callback function. </para>
</listitem>
            <listitem><para><link linkend="_structevmc__tx__context">evmc_tx_context</link> <link linkend="_classExampleHost_1aa7acecd4846fda20be62fb724ed0075a">get_tx_context</link> () const noexcept final</para>

<para>Get transaction context callback function. </para>
</listitem>
            <listitem><para><link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> <link linkend="_classExampleHost_1ab9061ad7baeb932aeb1e5e6c15eaccdc">get_block_hash</link> (int64_t number) const noexcept final</para>

<para>Get block hash callback function. </para>
</listitem>
            <listitem><para>void <link linkend="_classExampleHost_1ae095a66b77e3c69f1b111eddf88556e8">emit_log</link> (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp;addr, const uint8_t *data, size_t data_size, const <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> topics[], size_t topics_count) noexcept final</para>

<para>Emit log callback function. </para>
</listitem>
            <listitem><para><link linkend="_group__EVMC_1ga9f71195f3873f9979d81d7a5e1b3aaf0">evmc_access_status</link> <link linkend="_classExampleHost_1a90efb185a1ad4f66c5ba404316c3497d">access_account</link> (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp;addr) noexcept final</para>

<para>Access account callback function. </para>
</listitem>
            <listitem><para><link linkend="_group__EVMC_1ga9f71195f3873f9979d81d7a5e1b3aaf0">evmc_access_status</link> <link linkend="_classExampleHost_1a4c9e24f1177e2ecddac5b6959c19ec60">access_storage</link> (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp;addr, const <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> &amp;key) noexcept final</para>

<para>Access storage callback function. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespaceevmc_1a85ff0436efd1c2e8b065f73b361269e1">evmc::accounts</link> <link linkend="_classExampleHost_1a5d19048754dc825a85e97157f8db1409">accounts</link></para>
</listitem>
            <listitem><para><link linkend="_structevmc__tx__context">evmc_tx_context</link> <link linkend="_classExampleHost_1a0945262a8d233b8d45b2479432b3d792">tx_context</link> {}</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="_example__host_8cpp_source_1l00046">46</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classExampleHost_1a53770f0a3ca09715b0306bdc9f0304b7"/><section>
    <title>ExampleHost()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>ExampleHost</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>ExampleHost</secondary></indexterm>
<para><computeroutput>ExampleHost::ExampleHost ( )<computeroutput>[default]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classExampleHost_1a6d2f475d7f9dde90a8a0bc18d13d8e3e"/><section>
    <title>ExampleHost()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>ExampleHost</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>ExampleHost</secondary></indexterm>
<para><computeroutput>ExampleHost::ExampleHost (<link linkend="_structevmc__tx__context">evmc_tx_context</link> &amp; _tx_context)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_example__host_8cpp_source_1l00053">53</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00053"/>00053 :&#32;<link linkend="_classExampleHost_1a0945262a8d233b8d45b2479432b3d792">tx_context</link>{_tx_context}&#32;{}
</programlisting></section>
<anchor xml:id="_classExampleHost_1a92bfbfcc308a397e27dbc34520030614"/><section>
    <title>ExampleHost()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>ExampleHost</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>ExampleHost</secondary></indexterm>
<para><computeroutput>ExampleHost::ExampleHost (<link linkend="_structevmc__tx__context">evmc_tx_context</link> &amp; _tx_context, <link linkend="_namespaceevmc_1a85ff0436efd1c2e8b065f73b361269e1">evmc::accounts</link> &amp; _accounts)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_example__host_8cpp_source_1l00054">54</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classExampleHost_1a5d19048754dc825a85e97157f8db1409">accounts</link>{_accounts},&#32;<link linkend="_classExampleHost_1a0945262a8d233b8d45b2479432b3d792">tx_context</link>{_tx_context}
<anchor xml:id="_classExampleHost_1l00056"/>00056 &#32;&#32;&#32;&#32;{}
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classExampleHost_1a90efb185a1ad4f66c5ba404316c3497d"/><section>
    <title>access_account()</title>
<indexterm><primary>access_account</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>access_account</secondary></indexterm>
<para><computeroutput><link linkend="_group__EVMC_1ga9f71195f3873f9979d81d7a5e1b3aaf0">evmc_access_status</link> ExampleHost::access_account (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp; addr)<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Access account callback function. </para>
</para>
<para>
Implements <link linkend="_classevmc_1_1HostInterface_1ab5ec93cb9fc439fd22cacecc468ed9f8">evmc::HostInterface</link>.</para>
<para>
Definition at line <link linkend="_example__host_8cpp_source_1l00167">167</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00168"/>00168 &#32;&#32;&#32;&#32;{
<anchor xml:id="_classExampleHost_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)addr;
<anchor xml:id="_classExampleHost_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__EVMC_1gga9f71195f3873f9979d81d7a5e1b3aaf0a3a719b69a4c3f9d6b9913b47312b5a76">EVMC_ACCESS_COLD</link>;
<anchor xml:id="_classExampleHost_1l00171"/>00171 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_classExampleHost_1a4c9e24f1177e2ecddac5b6959c19ec60"/><section>
    <title>access_storage()</title>
<indexterm><primary>access_storage</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>access_storage</secondary></indexterm>
<para><computeroutput><link linkend="_group__EVMC_1ga9f71195f3873f9979d81d7a5e1b3aaf0">evmc_access_status</link> ExampleHost::access_storage (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp; addr, const <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> &amp; key)<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Access storage callback function. </para>
</para>
<para>
Implements <link linkend="_classevmc_1_1HostInterface_1ac0192ce7575fe86b7466405e93484ad8">evmc::HostInterface</link>.</para>
<para>
Definition at line <link linkend="_example__host_8cpp_source_1l00173">173</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00175"/>00175 &#32;&#32;&#32;&#32;{
<anchor xml:id="_classExampleHost_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)addr;
<anchor xml:id="_classExampleHost_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)key;
<anchor xml:id="_classExampleHost_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__EVMC_1gga9f71195f3873f9979d81d7a5e1b3aaf0a3a719b69a4c3f9d6b9913b47312b5a76">EVMC_ACCESS_COLD</link>;
<anchor xml:id="_classExampleHost_1l00179"/>00179 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_classExampleHost_1ac37de9a8465e23879f64c8ada27b1285"/><section>
    <title>account_exists()</title>
<indexterm><primary>account_exists</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>account_exists</secondary></indexterm>
<para><computeroutput>bool ExampleHost::account_exists (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp; addr) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Check account existence callback function. </para>
</para>
<para>
Implements <link linkend="_classevmc_1_1HostInterface_1ae735474dc8425b49b3eb0ef12212fae7">evmc::HostInterface</link>.</para>
<para>
Definition at line <link linkend="_example__host_8cpp_source_1l00058">58</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00059"/>00059 &#32;&#32;&#32;&#32;{
<anchor xml:id="_classExampleHost_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classExampleHost_1a5d19048754dc825a85e97157f8db1409">accounts</link>.find(addr)&#32;!=&#32;<link linkend="_classExampleHost_1a5d19048754dc825a85e97157f8db1409">accounts</link>.end();
<anchor xml:id="_classExampleHost_1l00061"/>00061 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_classExampleHost_1ad76f578cc300dfb59e3f7eb561e7112e"/><section>
    <title>call()</title>
<indexterm><primary>call</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>call</secondary></indexterm>
<para><computeroutput><link linkend="_classevmc_1_1result">evmc::result</link> ExampleHost::call (const <link linkend="_structevmc__message">evmc_message</link> &amp; msg)<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Call callback function. </para>
</para>
<para>
Implements <link linkend="_classevmc_1_1HostInterface_1a392feba1f27c9352c85bf2559c1fbcb2">evmc::HostInterface</link>.</para>
<para>
Definition at line <link linkend="_example__host_8cpp_source_1l00138">138</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00139"/>00139 &#32;&#32;&#32;&#32;{
<anchor xml:id="_classExampleHost_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_group__EVMC_1gga4c0be97f333c050ff45321fcaa34d920aed708e84d49cc1270e54ec20b0ca0a05">EVMC_REVERT</link>,&#32;msg.<link linkend="_structevmc__message_1ae8deff46588584fa27890e74c82db5e7">gas</link>,&#32;msg.<link linkend="_structevmc__message_1a1adee3454b105eb29cd659ee0cf65c77">input_data</link>,&#32;msg.<link linkend="_structevmc__message_1a2cf1deebd0dbbb20f25ecdfa299f4b5d">input_size</link>};
<anchor xml:id="_classExampleHost_1l00141"/>00141 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_classExampleHost_1a9d20a3ad0ef146bd51b99a60c4aabc56"/><section>
    <title>copy_code()</title>
<indexterm><primary>copy_code</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>copy_code</secondary></indexterm>
<para><computeroutput>size_t ExampleHost::copy_code (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp; addr, size_t code_offset, uint8_t * buffer_data, size_t buffer_size) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Copy code callback function. </para>
</para>
<para>
Implements <link linkend="_classevmc_1_1HostInterface_1ace3dcf2b277c60cb422f3af1d63dd36b">evmc::HostInterface</link>.</para>
<para>
Definition at line <link linkend="_example__host_8cpp_source_1l00111">111</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00115"/>00115 &#32;&#32;&#32;&#32;{
<anchor xml:id="_classExampleHost_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="_classExampleHost_1a5d19048754dc825a85e97157f8db1409">accounts</link>.find(addr);
<anchor xml:id="_classExampleHost_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;==&#32;<link linkend="_classExampleHost_1a5d19048754dc825a85e97157f8db1409">accounts</link>.end())
<anchor xml:id="_classExampleHost_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_classExampleHost_1l00119"/>00119 
<anchor xml:id="_classExampleHost_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;code&#32;=&#32;it-&gt;second.code;
<anchor xml:id="_classExampleHost_1l00121"/>00121 
<anchor xml:id="_classExampleHost_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(code_offset&#32;&gt;=&#32;code.size())
<anchor xml:id="_classExampleHost_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_classExampleHost_1l00124"/>00124 
<anchor xml:id="_classExampleHost_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;n&#32;=&#32;std::min(buffer_size,&#32;code.size()&#32;-&#32;code_offset);
<anchor xml:id="_classExampleHost_1l00126"/>00126 
<anchor xml:id="_classExampleHost_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;&#32;0)
<anchor xml:id="_classExampleHost_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::copy_n(&amp;code[code_offset],&#32;n,&#32;buffer_data);
<anchor xml:id="_classExampleHost_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
<anchor xml:id="_classExampleHost_1l00130"/>00130 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_classExampleHost_1ae095a66b77e3c69f1b111eddf88556e8"/><section>
    <title>emit_log()</title>
<indexterm><primary>emit_log</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>emit_log</secondary></indexterm>
<para><computeroutput>void ExampleHost::emit_log (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp; addr, const uint8_t * data, size_t data_size, const <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> topics[], size_t num_topics)<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Emit log callback function. </para>
</para>
<para>
Implements <link linkend="_classevmc_1_1HostInterface_1a1f95317392e4615e29ad038fe4ff049d">evmc::HostInterface</link>.</para>
<para>
Definition at line <link linkend="_example__host_8cpp_source_1l00154">154</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00159"/>00159 &#32;&#32;&#32;&#32;{
<anchor xml:id="_classExampleHost_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)addr;
<anchor xml:id="_classExampleHost_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)data;
<anchor xml:id="_classExampleHost_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)data_size;
<anchor xml:id="_classExampleHost_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)topics;
<anchor xml:id="_classExampleHost_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)topics_count;
<anchor xml:id="_classExampleHost_1l00165"/>00165 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_classExampleHost_1affae69006394fc7c455cb629eb160df9"/><section>
    <title>get_balance()</title>
<indexterm><primary>get_balance</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>get_balance</secondary></indexterm>
<para><computeroutput><link linkend="_namespaceevmc_1a92bc6b73f1ce3a2b2eea018cf902c4da">evmc::uint256be</link> ExampleHost::get_balance (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp; addr) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Get balance callback function. </para>
</para>
<para>
Implements <link linkend="_classevmc_1_1HostInterface_1ac30e7e938793a2c46e3d5d416e15c3f5">evmc::HostInterface</link>.</para>
<para>
Definition at line <link linkend="_example__host_8cpp_source_1l00087">87</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00088"/>00088 &#32;&#32;&#32;&#32;{
<anchor xml:id="_classExampleHost_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="_classExampleHost_1a5d19048754dc825a85e97157f8db1409">accounts</link>.find(addr);
<anchor xml:id="_classExampleHost_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;!=&#32;<link linkend="_classExampleHost_1a5d19048754dc825a85e97157f8db1409">accounts</link>.end())
<anchor xml:id="_classExampleHost_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;second.balance;
<anchor xml:id="_classExampleHost_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
<anchor xml:id="_classExampleHost_1l00093"/>00093 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_classExampleHost_1ab9061ad7baeb932aeb1e5e6c15eaccdc"/><section>
    <title>get_block_hash()</title>
<indexterm><primary>get_block_hash</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>get_block_hash</secondary></indexterm>
<para><computeroutput><link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> ExampleHost::get_block_hash (int64_t block_number) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Get block hash callback function. </para>
</para>
<para>
Implements <link linkend="_classevmc_1_1HostInterface_1ab4fcbbe88b9490f78e0f99c7ce2b167f">evmc::HostInterface</link>.</para>
<para>
Definition at line <link linkend="_example__host_8cpp_source_1l00145">145</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00146"/>00146 &#32;&#32;&#32;&#32;{
<anchor xml:id="_classExampleHost_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;int64_t&#32;current_block_number&#32;=&#32;<link linkend="_classExampleHost_1aa7acecd4846fda20be62fb724ed0075a">get_tx_context</link>().<link linkend="_structevmc__tx__context_1a1c3c0552db49b91358256c25643ba44a">block_number</link>;
<anchor xml:id="_classExampleHost_1l00148"/>00148 
<anchor xml:id="_classExampleHost_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(number&#32;&lt;&#32;current_block_number&#32;&amp;&amp;&#32;number&#32;&gt;=&#32;current_block_number&#32;-&#32;256)&#32;?
<anchor xml:id="_classExampleHost_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xb10c8a5fb10c8a5fb10c8a5fb10c8a5fb10c8a5fb10c8a5fb10c8a5fb10c8a5f_bytes32&#32;:
<anchor xml:id="_classExampleHost_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0_bytes32;
<anchor xml:id="_classExampleHost_1l00152"/>00152 &#32;&#32;&#32;&#32;}
</programlisting>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classExampleHost_ab9061ad7baeb932aeb1e5e6c15eaccdc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classExampleHost_1a588763d53930877e2aac165fe8253bf2"/><section>
    <title>get_code_hash()</title>
<indexterm><primary>get_code_hash</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>get_code_hash</secondary></indexterm>
<para><computeroutput><link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> ExampleHost::get_code_hash (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp; addr) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Get code hash callback function. </para>
</para>
<para>
Implements <link linkend="_classevmc_1_1HostInterface_1a748a36bc934302492f54e3fc90cdca88">evmc::HostInterface</link>.</para>
<para>
Definition at line <link linkend="_example__host_8cpp_source_1l00103">103</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00104"/>00104 &#32;&#32;&#32;&#32;{
<anchor xml:id="_classExampleHost_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="_classExampleHost_1a5d19048754dc825a85e97157f8db1409">accounts</link>.find(addr);
<anchor xml:id="_classExampleHost_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;!=&#32;<link linkend="_classExampleHost_1a5d19048754dc825a85e97157f8db1409">accounts</link>.end())
<anchor xml:id="_classExampleHost_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;second.code_hash();
<anchor xml:id="_classExampleHost_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
<anchor xml:id="_classExampleHost_1l00109"/>00109 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_classExampleHost_1a7e5aacf59d0d072d8ebbce74ba3cf513"/><section>
    <title>get_code_size()</title>
<indexterm><primary>get_code_size</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>get_code_size</secondary></indexterm>
<para><computeroutput>size_t ExampleHost::get_code_size (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp; addr) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Get code size callback function. </para>
</para>
<para>
Implements <link linkend="_classevmc_1_1HostInterface_1a8cb4656ab4c478d5fe152b4f6c4b6dc4">evmc::HostInterface</link>.</para>
<para>
Definition at line <link linkend="_example__host_8cpp_source_1l00095">95</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00096"/>00096 &#32;&#32;&#32;&#32;{
<anchor xml:id="_classExampleHost_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="_classExampleHost_1a5d19048754dc825a85e97157f8db1409">accounts</link>.find(addr);
<anchor xml:id="_classExampleHost_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;!=&#32;<link linkend="_classExampleHost_1a5d19048754dc825a85e97157f8db1409">accounts</link>.end())
<anchor xml:id="_classExampleHost_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;second.code.size();
<anchor xml:id="_classExampleHost_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_classExampleHost_1l00101"/>00101 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_classExampleHost_1afeed7489e0128d0df0f398744c57b14a"/><section>
    <title>get_storage()</title>
<indexterm><primary>get_storage</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>get_storage</secondary></indexterm>
<para><computeroutput><link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> ExampleHost::get_storage (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp; addr, const <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> &amp; key) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Get storage callback function. </para>
</para>
<para>
Implements <link linkend="_classevmc_1_1HostInterface_1a020f849f737fcd841681f73f74514b4d">evmc::HostInterface</link>.</para>
<para>
Definition at line <link linkend="_example__host_8cpp_source_1l00063">63</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00065"/>00065 &#32;&#32;&#32;&#32;{
<anchor xml:id="_classExampleHost_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;account_iter&#32;=&#32;<link linkend="_classExampleHost_1a5d19048754dc825a85e97157f8db1409">accounts</link>.find(addr);
<anchor xml:id="_classExampleHost_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(account_iter&#32;==&#32;<link linkend="_classExampleHost_1a5d19048754dc825a85e97157f8db1409">accounts</link>.end())
<anchor xml:id="_classExampleHost_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
<anchor xml:id="_classExampleHost_1l00069"/>00069 
<anchor xml:id="_classExampleHost_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;storage_iter&#32;=&#32;account_iter-&gt;second.storage.find(key);
<anchor xml:id="_classExampleHost_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(storage_iter&#32;!=&#32;account_iter-&gt;second.storage.end())
<anchor xml:id="_classExampleHost_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;storage_iter-&gt;second;
<anchor xml:id="_classExampleHost_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
<anchor xml:id="_classExampleHost_1l00074"/>00074 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_classExampleHost_1aa7acecd4846fda20be62fb724ed0075a"/><section>
    <title>get_tx_context()</title>
<indexterm><primary>get_tx_context</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>get_tx_context</secondary></indexterm>
<para><computeroutput><link linkend="_structevmc__tx__context">evmc_tx_context</link> ExampleHost::get_tx_context ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Get transaction context callback function. </para>
</para>
<para>
Implements <link linkend="_classevmc_1_1HostInterface_1a2e958d4265e17048b817626f6fd3cdcc">evmc::HostInterface</link>.</para>
<para>
Definition at line <link linkend="_example__host_8cpp_source_1l00143">143</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00143"/>00143 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classExampleHost_1a0945262a8d233b8d45b2479432b3d792">tx_context</link>;&#32;}
</programlisting></section>
<anchor xml:id="_classExampleHost_1a9d2ce6481950dfc3d30fdd9e80665c14"/><section>
    <title>selfdestruct()</title>
<indexterm><primary>selfdestruct</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>selfdestruct</secondary></indexterm>
<para><computeroutput>void ExampleHost::selfdestruct (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp; addr, const <link linkend="_structevmc_1_1address">evmc::address</link> &amp; beneficiary)<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Selfdestruct callback function. </para>
</para>
<para>
Implements <link linkend="_classevmc_1_1HostInterface_1afd78f82767a70ed1e4e68fce6007ad0b">evmc::HostInterface</link>.</para>
<para>
Definition at line <link linkend="_example__host_8cpp_source_1l00132">132</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00133"/>00133 &#32;&#32;&#32;&#32;{
<anchor xml:id="_classExampleHost_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)addr;
<anchor xml:id="_classExampleHost_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)beneficiary;
<anchor xml:id="_classExampleHost_1l00136"/>00136 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_classExampleHost_1a2e2c1d74614e7c863b501e2e1e56e622"/><section>
    <title>set_storage()</title>
<indexterm><primary>set_storage</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>set_storage</secondary></indexterm>
<para><computeroutput><link linkend="_group__EVMC_1gae012fd6b8e5c23806b507c2d3e9fb1aa">evmc_storage_status</link> ExampleHost::set_storage (const <link linkend="_structevmc_1_1address">evmc::address</link> &amp; addr, const <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> &amp; key, const <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> &amp; value)<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Set storage callback function. </para>
</para>
<para>
Implements <link linkend="_classevmc_1_1HostInterface_1ab302ebc0c838560a6c4b8b1aec21815a">evmc::HostInterface</link>.</para>
<para>
Definition at line <link linkend="_example__host_8cpp_source_1l00076">76</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_classExampleHost_1l00079"/>00079 &#32;&#32;&#32;&#32;{
<anchor xml:id="_classExampleHost_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;account&#32;=&#32;<link linkend="_classExampleHost_1a5d19048754dc825a85e97157f8db1409">accounts</link>[addr];
<anchor xml:id="_classExampleHost_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;prev_value&#32;=&#32;account.storage[key];
<anchor xml:id="_classExampleHost_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;account.storage[key]&#32;=&#32;value;
<anchor xml:id="_classExampleHost_1l00083"/>00083 
<anchor xml:id="_classExampleHost_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(prev_value&#32;==&#32;value)&#32;?&#32;<link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaad6d527edcbe8a63edad5be80f252330c">EVMC_STORAGE_UNCHANGED</link>&#32;:&#32;<link linkend="_group__EVMC_1ggae012fd6b8e5c23806b507c2d3e9fb1aaaf102ce749767d5277923c221089da2c6">EVMC_STORAGE_MODIFIED</link>;
<anchor xml:id="_classExampleHost_1l00085"/>00085 &#32;&#32;&#32;&#32;}
</programlisting></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classExampleHost_1a5d19048754dc825a85e97157f8db1409"/><section>
    <title>accounts</title>
<indexterm><primary>accounts</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>accounts</secondary></indexterm>
<para><computeroutput><link linkend="_namespaceevmc_1a85ff0436efd1c2e8b065f73b361269e1">evmc::accounts</link> ExampleHost::accounts<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_example__host_8cpp_source_1l00048">48</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
</section>
<anchor xml:id="_classExampleHost_1a0945262a8d233b8d45b2479432b3d792"/><section>
    <title>tx_context</title>
<indexterm><primary>tx_context</primary><secondary>ExampleHost</secondary></indexterm>
<indexterm><primary>ExampleHost</primary><secondary>tx_context</secondary></indexterm>
<para><computeroutput><link linkend="_structevmc__tx__context">evmc_tx_context</link> ExampleHost::tx_context {}<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_example__host_8cpp_source_1l00049">49</link> of file <link linkend="_example__host_8cpp_source">example_host.cpp</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
examples/<link linkend="_example__host_8cpp">example_host.cpp</link></section>
</section>
