<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_hex_8hpp_source" xml:lang="en-US">
<title>hex.hpp</title>
<indexterm><primary>include/evmc/hex.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_hex_8hpp_source_1l00001"/>00001 <emphasis role="comment">//&#32;EVMC:&#32;Ethereum&#32;Client-VM&#32;Connector&#32;API.</emphasis>
<anchor xml:id="_hex_8hpp_source_1l00002"/>00002 <emphasis role="comment">//&#32;Copyright&#32;2021&#32;The&#32;EVMC&#32;Authors.</emphasis>
<anchor xml:id="_hex_8hpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;Licensed&#32;under&#32;the&#32;Apache&#32;License,&#32;Version&#32;2.0.</emphasis>
<anchor xml:id="_hex_8hpp_source_1l00004"/>00004 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
<anchor xml:id="_hex_8hpp_source_1l00005"/>00005 
<anchor xml:id="_hex_8hpp_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
<anchor xml:id="_hex_8hpp_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
<anchor xml:id="_hex_8hpp_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="_hex_8hpp_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&lt;string_view&gt;</emphasis>
<anchor xml:id="_hex_8hpp_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&lt;system_error&gt;</emphasis>
<anchor xml:id="_hex_8hpp_source_1l00011"/>00011 
<anchor xml:id="_hex_8hpp_source_1l00012"/>00012 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceevmc">evmc</link>
<anchor xml:id="_hex_8hpp_source_1l00013"/>00013 {
<anchor xml:id="_hex_8hpp_source_1l00015"/><link linkend="_namespaceevmc_1a092c09f674d9cb5f0ba31d0f86537f4a">00015</link> <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespaceevmc_1a092c09f674d9cb5f0ba31d0f86537f4a">bytes</link>&#32;=&#32;std::basic_string&lt;uint8_t&gt;;
<anchor xml:id="_hex_8hpp_source_1l00016"/>00016 
<anchor xml:id="_hex_8hpp_source_1l00018"/><link linkend="_namespaceevmc_1a539bc1335390844ee67ae697ec457720">00018</link> <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespaceevmc_1a539bc1335390844ee67ae697ec457720">bytes_view</link>&#32;=&#32;std::basic_string_view&lt;uint8_t&gt;;
<anchor xml:id="_hex_8hpp_source_1l00019"/>00019 
<anchor xml:id="_hex_8hpp_source_1l00021"/><link linkend="_namespaceevmc_1a37d7a743959a67434404404b257b2fd4">00021</link> <emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_namespaceevmc_1a37d7a743959a67434404404b257b2fd4">hex_errc</link>
<anchor xml:id="_hex_8hpp_source_1l00022"/>00022 {
<anchor xml:id="_hex_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<link linkend="_namespaceevmc_1a37d7a743959a67434404404b257b2fd4a52e6eb82c226e9bfa738fa47d7e359dd">invalid_hex_digit</link>&#32;=&#32;1,
<anchor xml:id="_hex_8hpp_source_1l00025"/>00025 
<anchor xml:id="_hex_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<link linkend="_namespaceevmc_1a37d7a743959a67434404404b257b2fd4aac6aff673f8bde724199fc07cea34f63">incomplete_hex_byte_pair</link>&#32;=&#32;2,
<anchor xml:id="_hex_8hpp_source_1l00028"/>00028 };
<anchor xml:id="_hex_8hpp_source_1l00029"/>00029 
<anchor xml:id="_hex_8hpp_source_1l00031"/><link linkend="_namespaceevmc_1ab7adb84a6060aa244b75958d73752696">00031</link> <emphasis role="keyword">const</emphasis>&#32;std::error_category&amp;&#32;<link linkend="_namespaceevmc_1ab7adb84a6060aa244b75958d73752696">hex_category</link>()&#32;noexcept;
<anchor xml:id="_hex_8hpp_source_1l00032"/>00032 
<anchor xml:id="_hex_8hpp_source_1l00034"/><link linkend="_namespaceevmc_1aaf35d1ee5ad04f36c4287e9bafb4bd48">00034</link> inline&#32;std::error_code&#32;<link linkend="_namespaceevmc_1aaf35d1ee5ad04f36c4287e9bafb4bd48">make_error_code</link>(<link linkend="_namespaceevmc_1a37d7a743959a67434404404b257b2fd4">hex_errc</link>&#32;errc)&#32;noexcept
<anchor xml:id="_hex_8hpp_source_1l00035"/>00035 {
<anchor xml:id="_hex_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(errc),&#32;<link linkend="_namespaceevmc_1ab7adb84a6060aa244b75958d73752696">hex_category</link>()};
<anchor xml:id="_hex_8hpp_source_1l00037"/>00037 }
<anchor xml:id="_hex_8hpp_source_1l00038"/>00038 
<anchor xml:id="_hex_8hpp_source_1l00040"/><link linkend="_structevmc_1_1hex__error">00040</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structevmc_1_1hex__error">hex_error</link>&#32;:&#32;std::system_error
<anchor xml:id="_hex_8hpp_source_1l00041"/>00041 {
<anchor xml:id="_hex_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;system_error::system_error;
<anchor xml:id="_hex_8hpp_source_1l00043"/>00043 };
<anchor xml:id="_hex_8hpp_source_1l00044"/>00044 
<anchor xml:id="_hex_8hpp_source_1l00046"/><link linkend="_namespaceevmc_1a19a82782b528ebd37782eb145cf4152c">00046</link> <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespaceevmc_1a19a82782b528ebd37782eb145cf4152c">hex</link>(uint8_t&#32;b)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_hex_8hpp_source_1l00047"/>00047 {
<anchor xml:id="_hex_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;hex_chars&#32;=&#32;<emphasis role="stringliteral">&quot;0123456789abcdef&quot;</emphasis>;
<anchor xml:id="_hex_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{hex_chars[b&#32;&gt;&gt;&#32;4],&#32;hex_chars[b&#32;&amp;&#32;0xf]};
<anchor xml:id="_hex_8hpp_source_1l00050"/>00050 }
<anchor xml:id="_hex_8hpp_source_1l00051"/>00051 
<anchor xml:id="_hex_8hpp_source_1l00053"/><link linkend="_namespaceevmc_1aad6a175f9f53ee5700cb0c233efba79b">00053</link> std::error_code&#32;<link linkend="_namespaceevmc_1aad6a175f9f53ee5700cb0c233efba79b">validate_hex</link>(std::string_view&#32;<link linkend="_namespaceevmc_1a19a82782b528ebd37782eb145cf4152c">hex</link>)&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_hex_8hpp_source_1l00054"/>00054 
<anchor xml:id="_hex_8hpp_source_1l00058"/><link linkend="_namespaceevmc_1a4d4e349e08f3fed84bbd6424208a43cf">00058</link> <link linkend="_namespaceevmc_1a092c09f674d9cb5f0ba31d0f86537f4a">bytes</link>&#32;<link linkend="_namespaceevmc_1a4d4e349e08f3fed84bbd6424208a43cf">from_hex</link>(std::string_view&#32;<link linkend="_namespaceevmc_1a19a82782b528ebd37782eb145cf4152c">hex</link>);
<anchor xml:id="_hex_8hpp_source_1l00059"/>00059 
<anchor xml:id="_hex_8hpp_source_1l00061"/><link linkend="_namespaceevmc_1adb1773c2909e66879ce13de2a49c5fee">00061</link> std::string&#32;<link linkend="_namespaceevmc_1a19a82782b528ebd37782eb145cf4152c">hex</link>(<link linkend="_namespaceevmc_1a539bc1335390844ee67ae697ec457720">bytes_view</link>&#32;bs);
<anchor xml:id="_hex_8hpp_source_1l00062"/>00062 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;evmc</emphasis>
<anchor xml:id="_hex_8hpp_source_1l00063"/>00063 
<anchor xml:id="_hex_8hpp_source_1l00064"/>00064 <emphasis role="keyword">namespace&#32;</emphasis>std
<anchor xml:id="_hex_8hpp_source_1l00065"/>00065 {
<anchor xml:id="_hex_8hpp_source_1l00068"/>00068 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
<anchor xml:id="_hex_8hpp_source_1l00069"/>00069 <emphasis role="keyword">struct&#32;</emphasis>is_error_code_enum&lt;<link linkend="_namespaceevmc">evmc</link>::<link linkend="_namespaceevmc_1a37d7a743959a67434404404b257b2fd4">hex_errc</link>&gt;&#32;:&#32;true_type
<anchor xml:id="_hex_8hpp_source_1l00070"/>00070 {};
<anchor xml:id="_hex_8hpp_source_1l00071"/>00071 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
</programlisting></section>
