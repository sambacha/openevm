<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__loader" xml:lang="en-US">
<title>EVMC Loader</title>
<indexterm><primary>EVMC Loader</primary></indexterm>
<para>

<para>EVMC Loader Library. </para>
 
</para>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef struct <link linkend="_structevmc__vm">evmc_vm</link> *(* <link linkend="_group__loader_1gaa47b31e30330c2614e4d40e14d014822">evmc_create_fn</link>) (void)</para>

<para>The function pointer type for EVMC create functions. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_group__loader_1gadf193ed1d2d7e9053e9c592fc201bd7d">evmc_loader_error_code</link> { 
<link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da0cead101d164fef2ac74efd4d6e1ae6d">EVMC_LOADER_SUCCESS</link> = 0
, <link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da199bb0c460fa6263b26badcc6f6e65fb">EVMC_LOADER_CANNOT_OPEN</link> = 1
, <link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da397b783d11709ec470bf5782c377deb2">EVMC_LOADER_SYMBOL_NOT_FOUND</link> = 2
, <link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da36c6ba4f96cdd1b5407aa0f26a9aa379">EVMC_LOADER_INVALID_ARGUMENT</link> = 3
, 
<link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da504de7833560037be4d2c620345767f5">EVMC_LOADER_VM_CREATION_FAILURE</link> = 4
, <link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da0d4eb3a48d3f8c500b96f43e1aa7c458">EVMC_LOADER_ABI_VERSION_MISMATCH</link> = 5
, <link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da53b3d46623f93646389aaf65d977aff2">EVMC_LOADER_INVALID_OPTION_NAME</link> = 6
, <link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7dad2625a5c71f0c585cf0493c47c805e1b">EVMC_LOADER_INVALID_OPTION_VALUE</link> = 7
 }</para>

<para>Error codes for the EVMC loader. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_group__loader_1gaa47b31e30330c2614e4d40e14d014822">evmc_create_fn</link> <link linkend="_group__loader_1gabcf5733eb4dd80c1ce060aec9ed60600">evmc_load</link> (const char *filename, enum <link linkend="_group__loader_1gadf193ed1d2d7e9053e9c592fc201bd7d">evmc_loader_error_code</link> *error_code)</para>

<para>Dynamically loads the EVMC module with a VM implementation. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc__vm">evmc_vm</link> * <link linkend="_group__loader_1ga53c5982e90b8dcbae860b98cae9951da">evmc_load_and_create</link> (const char *filename, enum <link linkend="_group__loader_1gadf193ed1d2d7e9053e9c592fc201bd7d">evmc_loader_error_code</link> *error_code)</para>

<para>Dynamically loads the EVMC module and creates the VM instance. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc__vm">evmc_vm</link> * <link linkend="_group__loader_1ga3e29ca285fe13db086daf0bf98b4a046">evmc_load_and_configure</link> (const char *config, enum <link linkend="_group__loader_1gadf193ed1d2d7e9053e9c592fc201bd7d">evmc_loader_error_code</link> *error_code)</para>

<para>Dynamically loads the EVMC module, then creates and configures the VM instance. </para>
</listitem>
            <listitem><para>const char * <link linkend="_group__loader_1gabc6999f43f5bdc388bf3e1662b1c4e97">evmc_last_error_msg</link> (void)</para>

<para>Returns the human-readable message describing the most recent error that occurred in EVMC loading since the last call to this function. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>EVMC Loader Library. </para>

<para>The EVMC Loader Library supports loading VMs implemented as Dynamically Loaded Libraries (DLLs, shared objects). </para>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_group__loader_1gaa47b31e30330c2614e4d40e14d014822"/><section>
    <title>evmc_create_fn</title>
<indexterm><primary>evmc_create_fn</primary><secondary>EVMC Loader</secondary></indexterm>
<indexterm><primary>EVMC Loader</primary><secondary>evmc_create_fn</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_structevmc__vm">evmc_vm</link> *(* evmc_create_fn) (void)</computeroutput></para><para>

<para>The function pointer type for EVMC create functions. </para>
</para>
<para>
Definition at line <link linkend="_loader_8h_source_1l00001">1</link> of file <link linkend="_loader_8h_source">loader.h</link>.</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_group__loader_1gadf193ed1d2d7e9053e9c592fc201bd7d"/><section>
    <title>evmc_loader_error_code</title>
<indexterm><primary>evmc_loader_error_code</primary><secondary>EVMC Loader</secondary></indexterm>
<indexterm><primary>EVMC Loader</primary><secondary>evmc_loader_error_code</secondary></indexterm>
<para><computeroutput>enum <link linkend="_group__loader_1gadf193ed1d2d7e9053e9c592fc201bd7d">evmc_loader_error_code</link></computeroutput></para><para>

<para>Error codes for the EVMC loader. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>EVMC_LOADER_SUCCESS</primary><secondary>EVMC Loader</secondary></indexterm>
<indexterm><primary>EVMC Loader</primary><secondary>EVMC_LOADER_SUCCESS</secondary></indexterm>
<anchor xml:id="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da0cead101d164fef2ac74efd4d6e1ae6d"/>EVMC_LOADER_SUCCESS</entry><entry>
<para>The loader succeeded. </para>
</entry></row><row><entry><indexterm><primary>EVMC_LOADER_CANNOT_OPEN</primary><secondary>EVMC Loader</secondary></indexterm>
<indexterm><primary>EVMC Loader</primary><secondary>EVMC_LOADER_CANNOT_OPEN</secondary></indexterm>
<anchor xml:id="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da199bb0c460fa6263b26badcc6f6e65fb"/>EVMC_LOADER_CANNOT_OPEN</entry><entry>
<para>The loader cannot open the given file name. </para>
</entry></row><row><entry><indexterm><primary>EVMC_LOADER_SYMBOL_NOT_FOUND</primary><secondary>EVMC Loader</secondary></indexterm>
<indexterm><primary>EVMC Loader</primary><secondary>EVMC_LOADER_SYMBOL_NOT_FOUND</secondary></indexterm>
<anchor xml:id="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da397b783d11709ec470bf5782c377deb2"/>EVMC_LOADER_SYMBOL_NOT_FOUND</entry><entry>
<para>The VM create function not found. </para>
</entry></row><row><entry><indexterm><primary>EVMC_LOADER_INVALID_ARGUMENT</primary><secondary>EVMC Loader</secondary></indexterm>
<indexterm><primary>EVMC Loader</primary><secondary>EVMC_LOADER_INVALID_ARGUMENT</secondary></indexterm>
<anchor xml:id="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da36c6ba4f96cdd1b5407aa0f26a9aa379"/>EVMC_LOADER_INVALID_ARGUMENT</entry><entry>
<para>The invalid argument value provided. </para>
</entry></row><row><entry><indexterm><primary>EVMC_LOADER_VM_CREATION_FAILURE</primary><secondary>EVMC Loader</secondary></indexterm>
<indexterm><primary>EVMC Loader</primary><secondary>EVMC_LOADER_VM_CREATION_FAILURE</secondary></indexterm>
<anchor xml:id="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da504de7833560037be4d2c620345767f5"/>EVMC_LOADER_VM_CREATION_FAILURE</entry><entry>
<para>The creation of a VM instance has failed. </para>
</entry></row><row><entry><indexterm><primary>EVMC_LOADER_ABI_VERSION_MISMATCH</primary><secondary>EVMC Loader</secondary></indexterm>
<indexterm><primary>EVMC Loader</primary><secondary>EVMC_LOADER_ABI_VERSION_MISMATCH</secondary></indexterm>
<anchor xml:id="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da0d4eb3a48d3f8c500b96f43e1aa7c458"/>EVMC_LOADER_ABI_VERSION_MISMATCH</entry><entry>
<para>The ABI version of the VM instance has mismatched. </para>
</entry></row><row><entry><indexterm><primary>EVMC_LOADER_INVALID_OPTION_NAME</primary><secondary>EVMC Loader</secondary></indexterm>
<indexterm><primary>EVMC Loader</primary><secondary>EVMC_LOADER_INVALID_OPTION_NAME</secondary></indexterm>
<anchor xml:id="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da53b3d46623f93646389aaf65d977aff2"/>EVMC_LOADER_INVALID_OPTION_NAME</entry><entry>
<para>The VM option is invalid. </para>
</entry></row><row><entry><indexterm><primary>EVMC_LOADER_INVALID_OPTION_VALUE</primary><secondary>EVMC Loader</secondary></indexterm>
<indexterm><primary>EVMC Loader</primary><secondary>EVMC_LOADER_INVALID_OPTION_VALUE</secondary></indexterm>
<anchor xml:id="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7dad2625a5c71f0c585cf0493c47c805e1b"/>EVMC_LOADER_INVALID_OPTION_VALUE</entry><entry>
<para>The VM option value is invalid. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_loader_8h_source_1l00025">25</link> of file <link linkend="_loader_8h_source">loader.h</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_group__loader_1l00026"/>00026 {
<anchor xml:id="_group__loader_1l00028"/>00028 &#32;&#32;&#32;&#32;<link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da0cead101d164fef2ac74efd4d6e1ae6d">EVMC_LOADER_SUCCESS</link>&#32;=&#32;0,
<anchor xml:id="_group__loader_1l00029"/>00029 
<anchor xml:id="_group__loader_1l00031"/>00031 &#32;&#32;&#32;&#32;<link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da199bb0c460fa6263b26badcc6f6e65fb">EVMC_LOADER_CANNOT_OPEN</link>&#32;=&#32;1,
<anchor xml:id="_group__loader_1l00032"/>00032 
<anchor xml:id="_group__loader_1l00034"/>00034 &#32;&#32;&#32;&#32;<link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da397b783d11709ec470bf5782c377deb2">EVMC_LOADER_SYMBOL_NOT_FOUND</link>&#32;=&#32;2,
<anchor xml:id="_group__loader_1l00035"/>00035 
<anchor xml:id="_group__loader_1l00037"/>00037 &#32;&#32;&#32;&#32;<link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da36c6ba4f96cdd1b5407aa0f26a9aa379">EVMC_LOADER_INVALID_ARGUMENT</link>&#32;=&#32;3,
<anchor xml:id="_group__loader_1l00038"/>00038 
<anchor xml:id="_group__loader_1l00040"/>00040 &#32;&#32;&#32;&#32;<link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da504de7833560037be4d2c620345767f5">EVMC_LOADER_VM_CREATION_FAILURE</link>&#32;=&#32;4,
<anchor xml:id="_group__loader_1l00041"/>00041 
<anchor xml:id="_group__loader_1l00043"/>00043 &#32;&#32;&#32;&#32;<link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da0d4eb3a48d3f8c500b96f43e1aa7c458">EVMC_LOADER_ABI_VERSION_MISMATCH</link>&#32;=&#32;5,
<anchor xml:id="_group__loader_1l00044"/>00044 
<anchor xml:id="_group__loader_1l00046"/>00046 &#32;&#32;&#32;&#32;<link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da53b3d46623f93646389aaf65d977aff2">EVMC_LOADER_INVALID_OPTION_NAME</link>&#32;=&#32;6,
<anchor xml:id="_group__loader_1l00047"/>00047 
<anchor xml:id="_group__loader_1l00049"/>00049 &#32;&#32;&#32;&#32;<link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7dad2625a5c71f0c585cf0493c47c805e1b">EVMC_LOADER_INVALID_OPTION_VALUE</link>&#32;=&#32;7
<anchor xml:id="_group__loader_1l00050"/>00050 };
</programlisting></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group__loader_1gabc6999f43f5bdc388bf3e1662b1c4e97"/><section>
    <title>evmc_last_error_msg()</title>
<indexterm><primary>evmc_last_error_msg</primary><secondary>EVMC Loader</secondary></indexterm>
<indexterm><primary>EVMC Loader</primary><secondary>evmc_last_error_msg</secondary></indexterm>
<para><computeroutput>const char * evmc_last_error_msg (void )</computeroutput></para><para>

<para>Returns the human-readable message describing the most recent error that occurred in EVMC loading since the last call to this function. </para>
</para>

<para>In case any loading function returned <link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da0cead101d164fef2ac74efd4d6e1ae6d">EVMC_LOADER_SUCCESS</link> this function always returns NULL. In case of error code other than success returned, this function MAY return the error message. Calling this function &quot;consumes&quot; the error message and the function will return NULL from subsequent invocations. This function is not thread-safe.</para>

<para><formalpara><title>Returns</title>

<para>Error message or NULL if no additional information is available. The returned pointer MUST NOT be freed by the caller. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group__loader_1gabcf5733eb4dd80c1ce060aec9ed60600"/><section>
    <title>evmc_load()</title>
<indexterm><primary>evmc_load</primary><secondary>EVMC Loader</secondary></indexterm>
<indexterm><primary>EVMC Loader</primary><secondary>evmc_load</secondary></indexterm>
<para><computeroutput><link linkend="_group__loader_1gaa47b31e30330c2614e4d40e14d014822">evmc_create_fn</link> evmc_load (const char * filename, enum <link linkend="_group__loader_1gadf193ed1d2d7e9053e9c592fc201bd7d">evmc_loader_error_code</link> * error_code)</computeroutput></para><para>

<para>Dynamically loads the EVMC module with a VM implementation. </para>
</para>

<para>This function tries to open a dynamically loaded library (DLL) at the given <computeroutput>filename</computeroutput>. On UNIX-like systems dlopen() function is used. On Windows LoadLibrary() function is used.</para>

<para>If the file does not exist or is not a valid shared library the <link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da199bb0c460fa6263b26badcc6f6e65fb">EVMC_LOADER_CANNOT_OPEN</link> error code is signaled and NULL is returned.</para>

<para>After the DLL is successfully loaded the function tries to find the EVM create function in the library. The <computeroutput>filename</computeroutput> is used to guess the EVM name and the name of the create function. The create function name is constructed by the following rules. Consider example path: &quot;/ethereum/libexample-interpreter.so.1.0&quot;.<itemizedlist>
<listitem>
<para>the filename is taken from the path: &quot;libexample-interpreter.so.1.0&quot;,</para>
</listitem><listitem>
<para>the &quot;lib&quot; prefix and all file extensions are stripped from the name: &quot;example-interpreter&quot;</para>
</listitem><listitem>
<para>all &quot;-&quot; are replaced with &quot;_&quot; to construct <emphasis>base name</emphasis>: &quot;example_interpreter&quot;,</para>
</listitem><listitem>
<para>the function name &quot;evmc_create_&quot; + <emphasis>base name</emphasis> is searched in the library: &quot;evmc_create_example_interpreter&quot;,</para>
</listitem><listitem>
<para>if the function is not found, the function name &quot;evmc_create&quot; is searched in the library.</para>
</listitem></itemizedlist>
</para>

<para>If the create function is found in the library, the pointer to the function is returned. Otherwise, the <link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da397b783d11709ec470bf5782c377deb2">EVMC_LOADER_SYMBOL_NOT_FOUND</link> error code is signaled and NULL is returned.</para>

<para>It is safe to call this function with the same filename argument multiple times (the DLL is not going to be loaded multiple times).</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>filename</entry><entry>
<para>The null terminated path (absolute or relative) to an EVMC module (dynamically loaded library) containing the VM implementation. If the value is NULL, an empty C-string or longer than the path maximum length the <link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da36c6ba4f96cdd1b5407aa0f26a9aa379">EVMC_LOADER_INVALID_ARGUMENT</link> is signaled. </para>
</entry>
                            </row>
                            <row>
<entry>error_code</entry><entry>
<para>The pointer to the error code. If not NULL the value is set to <link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da0cead101d164fef2ac74efd4d6e1ae6d">EVMC_LOADER_SUCCESS</link> on success or any other error code as described above. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The pointer to the EVM create function or NULL in case of error. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group__loader_1ga3e29ca285fe13db086daf0bf98b4a046"/><section>
    <title>evmc_load_and_configure()</title>
<indexterm><primary>evmc_load_and_configure</primary><secondary>EVMC Loader</secondary></indexterm>
<indexterm><primary>EVMC Loader</primary><secondary>evmc_load_and_configure</secondary></indexterm>
<para><computeroutput>struct <link linkend="_structevmc__vm">evmc_vm</link> * evmc_load_and_configure (const char * config, enum <link linkend="_group__loader_1gadf193ed1d2d7e9053e9c592fc201bd7d">evmc_loader_error_code</link> * error_code)</computeroutput></para><para>

<para>Dynamically loads the EVMC module, then creates and configures the VM instance. </para>
</para>

<para>This function performs the following actions atomically:<itemizedlist>
<listitem>
<para>loads the EVMC module (as <link linkend="_group__loader_1gabcf5733eb4dd80c1ce060aec9ed60600">evmc_load()</link>),</para>
</listitem><listitem>
<para>creates the VM instance,</para>
</listitem><listitem>
<para>configures the VM instance with options provided in the <computeroutput>config</computeroutput> parameter.</para>
</listitem></itemizedlist>
</para>

<para>The configuration string (<computeroutput>config</computeroutput>) has the following syntax: <literallayout><computeroutput>&lt;path&gt; (&quot;,&quot; &lt;option-name&gt; [&quot;=&quot; &lt;option-value&gt;])*
</computeroutput></literallayout> In this syntax, an option without a value can be specified (<computeroutput>,option,</computeroutput>) as a shortcut for using empty value (<computeroutput>,option=,</computeroutput>).</para>

<para>Options are passed to a VM in the order they are specified in the configuration string. It is up to the VM implementation how to handle duplicated options and other conflicts.</para>

<para>Example configuration string: <literallayout><computeroutput>./modules/vm.so,engine=compiler,trace,verbosity=2
</computeroutput></literallayout> The function signals the same errors as <link linkend="_group__loader_1ga53c5982e90b8dcbae860b98cae9951da">evmc_load_and_create()</link> and additionally:<itemizedlist>
<listitem>
<para><link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da53b3d46623f93646389aaf65d977aff2">EVMC_LOADER_INVALID_OPTION_NAME</link> when the provided options list contains an option unknown for the VM,</para>
</listitem><listitem>
<para><link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7dad2625a5c71f0c585cf0493c47c805e1b">EVMC_LOADER_INVALID_OPTION_VALUE</link> when there exists unsupported value for a given VM option.</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>config</entry><entry>
<para>The path to the EVMC module with additional configuration options. </para>
</entry>
                            </row>
                            <row>
<entry>error_code</entry><entry>
<para>The pointer to the error code. If not NULL the value is set to <link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da0cead101d164fef2ac74efd4d6e1ae6d">EVMC_LOADER_SUCCESS</link> on success or any other error code as described above. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The pointer to the created VM or NULL in case of error. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group__loader_1ga53c5982e90b8dcbae860b98cae9951da"/><section>
    <title>evmc_load_and_create()</title>
<indexterm><primary>evmc_load_and_create</primary><secondary>EVMC Loader</secondary></indexterm>
<indexterm><primary>EVMC Loader</primary><secondary>evmc_load_and_create</secondary></indexterm>
<para><computeroutput>struct <link linkend="_structevmc__vm">evmc_vm</link> * evmc_load_and_create (const char * filename, enum <link linkend="_group__loader_1gadf193ed1d2d7e9053e9c592fc201bd7d">evmc_loader_error_code</link> * error_code)</computeroutput></para><para>

<para>Dynamically loads the EVMC module and creates the VM instance. </para>
</para>

<para>This is a macro for creating the VM instance with the function returned from <link linkend="_group__loader_1gabcf5733eb4dd80c1ce060aec9ed60600">evmc_load()</link>. The function signals the same errors as <link linkend="_group__loader_1gabcf5733eb4dd80c1ce060aec9ed60600">evmc_load()</link> and additionally:<itemizedlist>
<listitem>
<para><link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da504de7833560037be4d2c620345767f5">EVMC_LOADER_VM_CREATION_FAILURE</link> when the create function returns NULL,</para>
</listitem><listitem>
<para><link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da0d4eb3a48d3f8c500b96f43e1aa7c458">EVMC_LOADER_ABI_VERSION_MISMATCH</link> when the created VM instance has ABI version different from the ABI version of this library (<link linkend="_group__EVMC_1gga06fc87d81c62e9abb8790b6e5713c55ba1db9144f8af4e62865f0c003c07a02bc">EVMC_ABI_VERSION</link>).</para>
</listitem></itemizedlist>
</para>

<para>It is safe to call this function with the same filename argument multiple times: the DLL is not going to be loaded multiple times, but the function will return new VM instance each time.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>filename</entry><entry>
<para>The null terminated path (absolute or relative) to an EVMC module (dynamically loaded library) containing the VM implementation. If the value is NULL, an empty C-string or longer than the path maximum length the <link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da36c6ba4f96cdd1b5407aa0f26a9aa379">EVMC_LOADER_INVALID_ARGUMENT</link> is signaled. </para>
</entry>
                            </row>
                            <row>
<entry>error_code</entry><entry>
<para>The pointer to the error code. If not NULL the value is set to <link linkend="_group__loader_1ggadf193ed1d2d7e9053e9c592fc201bd7da0cead101d164fef2ac74efd4d6e1ae6d">EVMC_LOADER_SUCCESS</link> on success or any other error code as described above. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The pointer to the created VM or NULL in case of error. </para>
</formalpara>
</para>
</section>
</section>
</section>
