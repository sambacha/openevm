<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_annotated" xml:lang="en-US">
<title>Class List</title>
Here are the classes, structs, unions and interfaces with brief descriptions:<link linkend="_structevmc_1_1account">evmc::account</link><link linkend="_structevmc_1_1address">evmc::address</link>
<para>The big-endian 160-bit hash suitable for keeping an Ethereum address </para>
<link linkend="_structevmc_1_1bytes32">evmc::bytes32</link>
<para>The fixed size array of 32 bytes for storing 256-bit EVM values </para>
<link linkend="_structevmc__address">evmc_address</link>
<para>Big-endian 160-bit hash suitable for keeping an Ethereum address </para>
<link linkend="_structevmc__bytes32">evmc_bytes32</link>
<para>The fixed size array of 32 bytes </para>
<link linkend="_structevmc__host__context">evmc_host_context</link>
<para>The opaque data type representing the Host execution context </para>
<link linkend="_structevmc__host__interface">evmc_host_interface</link>
<para>The Host interface </para>
<link linkend="_structevmc__instruction__metrics">evmc_instruction_metrics</link>
<para>Metrics for an EVM 1 instruction </para>
<link linkend="_structevmc__message">evmc_message</link>
<para>The message describing an EVM call, including a zero-depth calls from a transaction origin </para>
<link linkend="_structevmc__result">evmc_result</link>
<para>The EVM code execution result </para>
<link linkend="_unionevmc__result__optional__storage">evmc_result_optional_storage</link>
<para>The union representing <link linkend="_structevmc__result">evmc_result</link> &quot;optional storage&quot; </para>
<link linkend="_structevmc__tx__context">evmc_tx_context</link>
<para>The transaction and block data for execution </para>
<link linkend="_structevmc__vm">evmc_vm</link>
<para>The VM instance </para>
<link linkend="_classExampleHost">ExampleHost</link><link linkend="_structevmc_1_1hex__error">evmc::hex_error</link>
<para>Hex decoding exception </para>
<link linkend="_classevmc_1_1Host">evmc::Host</link>
<para>Abstract class to be used by <link linkend="_classevmc_1_1Host">Host</link> implementations </para>
<link linkend="_classevmc_1_1HostContext">evmc::HostContext</link>
<para>Wrapper around EVMC host context / host interface </para>
<link linkend="_classevmc_1_1HostInterface">evmc::HostInterface</link>
<para>The EVMC <link linkend="_classevmc_1_1Host">Host</link> interface </para>
<link linkend="_structevmc_1_1MockedHost_1_1log__record">evmc::MockedHost::log_record</link>
<para>LOG record </para>
<link linkend="_structevmc_1_1MockedAccount">evmc::MockedAccount</link>
<para>Mocked account </para>
<link linkend="_classevmc_1_1MockedHost">evmc::MockedHost</link>
<para>Mocked EVMC <link linkend="_classevmc_1_1Host">Host</link> implementation </para>
<link linkend="_classevmc_1_1result">evmc::result</link>
<para>The EVM code execution result. </para>
<link linkend="_structevmc_1_1MockedHost_1_1selfdestruct__record">evmc::MockedHost::selfdestruct_record</link>
<para>SELFDESTRUCT record </para>
<link linkend="_structevmc_1_1storage__value">evmc::storage_value</link>
<para>Extended value (by dirty flag) for account storage </para>
<link linkend="_classevmc_1_1VM">evmc::VM</link>
<para>The <link linkend="_classevmc_1_1VM">VM</link> instance. </para>
</section>
