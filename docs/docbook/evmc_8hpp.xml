<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_evmc_8hpp" xml:lang="en-US">
<title>include/evmc/evmc.hpp File Reference</title>
<indexterm><primary>include/evmc/evmc.hpp</primary></indexterm>
<para>

<para>EVMC C++ API - wrappers and bindings for C++. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &lt;evmc/evmc.h&gt;
#include &lt;evmc/helpers.h&gt;
#include &lt;functional&gt;
#include &lt;initializer_list&gt;
#include &lt;ostream&gt;
#include &lt;utility&gt;
</programlisting>Include dependency graph for evmc.hpp:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="evmc_8hpp__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="evmc_8hpp__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structevmc_1_1address">evmc::address</link></para>

<para>The big-endian 160-bit hash suitable for keeping an Ethereum address. </para>
</listitem>
            <listitem><para>struct <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link></para>

<para>The fixed size array of 32 bytes for storing 256-bit EVM values. </para>
</listitem>
            <listitem><para>class <link linkend="_classevmc_1_1result">evmc::result</link></para>

<para>The EVM code execution result. </para>
</listitem>
            <listitem><para>class <link linkend="_classevmc_1_1HostInterface">evmc::HostInterface</link></para>

<para>The EVMC <link linkend="_classevmc_1_1Host">Host</link> interface. </para>
</listitem>
            <listitem><para>class <link linkend="_classevmc_1_1HostContext">evmc::HostContext</link></para>

<para>Wrapper around EVMC host context / host interface. </para>
</listitem>
            <listitem><para>class <link linkend="_classevmc_1_1Host">evmc::Host</link></para>

<para>Abstract class to be used by <link linkend="_classevmc_1_1Host">Host</link> implementations. </para>
</listitem>
            <listitem><para>class <link linkend="_classevmc_1_1VM">evmc::VM</link></para>

<para>The <link linkend="_classevmc_1_1VM">VM</link> instance. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespaceevmc">evmc</link></para>

<para>EVMC C++ API - wrappers and bindings for C++. </para>
</listitem>
            <listitem><para>namespace <link linkend="_namespaceevmc_1_1fnv">evmc::fnv</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespaceevmc_1_1literals">evmc::literals</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_namespaceevmc_1a92bc6b73f1ce3a2b2eea018cf902c4da">evmc::uint256be</link> = <link linkend="_structevmc_1_1bytes32">bytes32</link></para>

<para>The alias for <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> to represent a big-endian 256-bit integer. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>constexpr uint64_t <link linkend="_namespaceevmc_1a1a253fea559bb97f713b91903ffc860e">evmc::load64be</link> (const uint8_t *data) noexcept</para>

<para>Loads 64 bits / 8 bytes of data from the given <computeroutput>data</computeroutput> array in big-endian order. </para>
</listitem>
            <listitem><para>constexpr uint64_t <link linkend="_namespaceevmc_1acd1275224a4eb5f6a672507d144065df">evmc::load64le</link> (const uint8_t *data) noexcept</para>

<para>Loads 64 bits / 8 bytes of data from the given <computeroutput>data</computeroutput> array in little-endian order. </para>
</listitem>
            <listitem><para>constexpr uint32_t <link linkend="_namespaceevmc_1a2170432bbbef84b33ce6dda30904068e">evmc::load32be</link> (const uint8_t *data) noexcept</para>

<para>Loads 32 bits / 4 bytes of data from the given <computeroutput>data</computeroutput> array in big-endian order. </para>
</listitem>
            <listitem><para>constexpr uint32_t <link linkend="_namespaceevmc_1ada9ae3e2b40c36dbea8b6fe8ab70375b">evmc::load32le</link> (const uint8_t *data) noexcept</para>

<para>Loads 32 bits / 4 bytes of data from the given <computeroutput>data</computeroutput> array in little-endian order. </para>
</listitem>
            <listitem><para>constexpr uint64_t <link linkend="_namespaceevmc_1_1fnv_1abd837c95e6df5b1f485f429e3b75050f">evmc::fnv::fnv1a_by64</link> (uint64_t h, uint64_t x) noexcept</para>

<para>The hashing transformation for 64-bit inputs based on the FNV-1a formula. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_namespaceevmc_1a3f6b3b885e1053cebe81913583212e70">evmc::operator==</link> (const <link linkend="_structevmc_1_1address">address</link> &amp;a, const <link linkend="_structevmc_1_1address">address</link> &amp;b) noexcept</para>

<para>The &quot;equal to&quot; comparison operator for the <link linkend="_structevmc_1_1address">evmc::address</link> type. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_namespaceevmc_1acef96efd7f9847cc089834dff73054bd">evmc::operator!=</link> (const <link linkend="_structevmc_1_1address">address</link> &amp;a, const <link linkend="_structevmc_1_1address">address</link> &amp;b) noexcept</para>

<para>The &quot;not equal to&quot; comparison operator for the <link linkend="_structevmc_1_1address">evmc::address</link> type. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_namespaceevmc_1a0a5557fb3dc3c04da6ef466ec3bb4d4c">evmc::operator&lt;</link> (const <link linkend="_structevmc_1_1address">address</link> &amp;a, const <link linkend="_structevmc_1_1address">address</link> &amp;b) noexcept</para>

<para>The &quot;less than&quot; comparison operator for the <link linkend="_structevmc_1_1address">evmc::address</link> type. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_namespaceevmc_1a44333e715985f766f2493b20ed665fbd">evmc::operator&gt;</link> (const <link linkend="_structevmc_1_1address">address</link> &amp;a, const <link linkend="_structevmc_1_1address">address</link> &amp;b) noexcept</para>

<para>The &quot;greater than&quot; comparison operator for the <link linkend="_structevmc_1_1address">evmc::address</link> type. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_namespaceevmc_1ac0dc436fe57925210dcd0481a79e9784">evmc::operator&lt;=</link> (const <link linkend="_structevmc_1_1address">address</link> &amp;a, const <link linkend="_structevmc_1_1address">address</link> &amp;b) noexcept</para>

<para>The &quot;less than or equal to&quot; comparison operator for the <link linkend="_structevmc_1_1address">evmc::address</link> type. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_namespaceevmc_1aa1739e6e990dbd1fd3d30b249b1d0d58">evmc::operator&gt;=</link> (const <link linkend="_structevmc_1_1address">address</link> &amp;a, const <link linkend="_structevmc_1_1address">address</link> &amp;b) noexcept</para>

<para>The &quot;greater than or equal to&quot; comparison operator for the <link linkend="_structevmc_1_1address">evmc::address</link> type. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_namespaceevmc_1a338b7c7a6dd5c12c0e37e5e8ef729100">evmc::operator==</link> (const <link linkend="_structevmc_1_1bytes32">bytes32</link> &amp;a, const <link linkend="_structevmc_1_1bytes32">bytes32</link> &amp;b) noexcept</para>

<para>The &quot;equal to&quot; comparison operator for the <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> type. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_namespaceevmc_1a5917d256b4c67912a47d3a54f849f751">evmc::operator!=</link> (const <link linkend="_structevmc_1_1bytes32">bytes32</link> &amp;a, const <link linkend="_structevmc_1_1bytes32">bytes32</link> &amp;b) noexcept</para>

<para>The &quot;not equal to&quot; comparison operator for the <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> type. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_namespaceevmc_1a4a0c61db81ebf11230c1506f7fc9e003">evmc::operator&lt;</link> (const <link linkend="_structevmc_1_1bytes32">bytes32</link> &amp;a, const <link linkend="_structevmc_1_1bytes32">bytes32</link> &amp;b) noexcept</para>

<para>The &quot;less than&quot; comparison operator for the <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> type. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_namespaceevmc_1a04835f698b6a2a5d2fbc3f8234518aed">evmc::operator&gt;</link> (const <link linkend="_structevmc_1_1bytes32">bytes32</link> &amp;a, const <link linkend="_structevmc_1_1bytes32">bytes32</link> &amp;b) noexcept</para>

<para>The &quot;greater than&quot; comparison operator for the <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> type. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_namespaceevmc_1a8580df251c76ac9b0a1561cbfda93274">evmc::operator&lt;=</link> (const <link linkend="_structevmc_1_1bytes32">bytes32</link> &amp;a, const <link linkend="_structevmc_1_1bytes32">bytes32</link> &amp;b) noexcept</para>

<para>The &quot;less than or equal to&quot; comparison operator for the <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> type. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_namespaceevmc_1ad830a8c519d4baf674a220480efc8ad3">evmc::operator&gt;=</link> (const <link linkend="_structevmc_1_1bytes32">bytes32</link> &amp;a, const <link linkend="_structevmc_1_1bytes32">bytes32</link> &amp;b) noexcept</para>

<para>The &quot;greater than or equal to&quot; comparison operator for the <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link> type. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_namespaceevmc_1afc53d0e831bda94fbf31a64d224c8d24">evmc::is_zero</link> (const <link linkend="_structevmc_1_1address">address</link> &amp;a) noexcept</para>

<para>Checks if the given address is the zero address. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_namespaceevmc_1a2277f8eca7df22f45a4476d3fe6342fe">evmc::is_zero</link> (const <link linkend="_structevmc_1_1bytes32">bytes32</link> &amp;a) noexcept</para>

<para>Checks if the given <link linkend="_structevmc_1_1bytes32">bytes32</link> object has all zero bytes. </para>
</listitem>
            <listitem><para>template&lt;char... c&gt; </para><para>constexpr <link linkend="_structevmc_1_1address">address</link> <link linkend="_namespaceevmc_1_1literals_1aec0a89f0e7f971c6704e25b8c3146e28">evmc::literals::operator&quot;&quot;_address</link> () noexcept</para>

<para>Literal for <link linkend="_structevmc_1_1address">evmc::address</link>. </para>
</listitem>
            <listitem><para>template&lt;char... c&gt; </para><para>constexpr <link linkend="_structevmc_1_1bytes32">bytes32</link> <link linkend="_namespaceevmc_1_1literals_1a3211e8fa6dbfe53bcd7102b1d58ed495">evmc::literals::operator&quot;&quot;_bytes32</link> () noexcept</para>

<para>Literal for <link linkend="_structevmc_1_1bytes32">evmc::bytes32</link>. </para>
</listitem>
            <listitem><para>const char * <link linkend="_namespaceevmc_1a44c9aad0ac3f324d817e18720a1e37de">evmc::to_string</link> (<link linkend="_group__EVMC_1ga4c0be97f333c050ff45321fcaa34d920">evmc_status_code</link> status_code) noexcept</para>

<para>Returns text representation of the <link linkend="_group__EVMC_1ga4c0be97f333c050ff45321fcaa34d920">evmc_status_code</link>. </para>
</listitem>
            <listitem><para>const char * <link linkend="_namespaceevmc_1a773edff68f6e013b3c809bb4c6ea33d3">evmc::to_string</link> (<link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link> rev) noexcept</para>

<para>Returns the name of the <link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link>. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_evmc_8hpp_1a8fbdc72590b7f78fb2afa785dd30dc98">operator&lt;&lt;</link> (std::ostream &amp;os, <link linkend="_group__EVMC_1ga4c0be97f333c050ff45321fcaa34d920">evmc_status_code</link> status_code)</para>

<para>&quot;Stream out&quot; operator implementation for <link linkend="_group__EVMC_1ga4c0be97f333c050ff45321fcaa34d920">evmc_status_code</link>. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_evmc_8hpp_1af12ec97e2945c75365b8ac7cc96495b7">operator&lt;&lt;</link> (std::ostream &amp;os, <link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link> rev)</para>

<para>&quot;Stream out&quot; operator implementation for <link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>constexpr auto <link linkend="_namespaceevmc_1_1fnv_1ae84e3cac71791be23e06c9a113f373d4">evmc::fnv::prime</link> = 0x100000001b3</para>

<para>The 64-bit FNV prime number. </para>
</listitem>
            <listitem><para>constexpr auto <link linkend="_namespaceevmc_1_1fnv_1a5e866562fb1d26d46ec0bb750e762237">evmc::fnv::offset_basis</link> = 0xcbf29ce484222325</para>

<para>The 64-bit FNV offset basis. </para>
</listitem>
            <listitem><para>constexpr auto <link linkend="_namespaceevmc_1a9843b267dc279832b0ff9578b7dacdb7">evmc::make_result</link> = <link linkend="_group__helpers_1ga1eb1facc9b5ddacda368ffdeb89d1a20">evmc_make_result</link></para>

<para>Alias for <link linkend="_group__helpers_1ga1eb1facc9b5ddacda368ffdeb89d1a20">evmc_make_result()</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>EVMC C++ API - wrappers and bindings for C++. </para>
<para>
Definition in file <link linkend="_evmc_8hpp_source">evmc.hpp</link>.</para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_evmc_8hpp_1af12ec97e2945c75365b8ac7cc96495b7"/><section>
    <title>operator&lt;&lt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>evmc.hpp</secondary></indexterm>
<indexterm><primary>evmc.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; operator&lt;&lt; (std::ostream &amp; os, <link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link> rev)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>&quot;Stream out&quot; operator implementation for <link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link>. </para>
</para>

<para><note><title>Note</title>

<para>This is defined in global namespace to match <link linkend="_group__EVMC_1gae5759b1590071966ccf6a505b52a0ef7">evmc_revision</link> definition and allow convenient operator overloading usage. </para>
</note>
</para>
<para>
Definition at line <link linkend="_evmc_8hpp_source_1l00886">886</link> of file <link linkend="_evmc_8hpp_source">evmc.hpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_evmc_8hpp_1l00887"/>00887 {
<anchor xml:id="_evmc_8hpp_1l00888"/>00888 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<link linkend="_namespaceevmc_1a44c9aad0ac3f324d817e18720a1e37de">evmc::to_string</link>(rev);
<anchor xml:id="_evmc_8hpp_1l00889"/>00889 }
</programlisting>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="evmc_8hpp_af12ec97e2945c75365b8ac7cc96495b7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_evmc_8hpp_1a8fbdc72590b7f78fb2afa785dd30dc98"/><section>
    <title>operator&lt;&lt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>evmc.hpp</secondary></indexterm>
<indexterm><primary>evmc.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; operator&lt;&lt; (std::ostream &amp; os, <link linkend="_group__EVMC_1ga4c0be97f333c050ff45321fcaa34d920">evmc_status_code</link> status_code)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>&quot;Stream out&quot; operator implementation for <link linkend="_group__EVMC_1ga4c0be97f333c050ff45321fcaa34d920">evmc_status_code</link>. </para>
</para>

<para><note><title>Note</title>

<para>This is defined in global namespace to match <link linkend="_group__EVMC_1ga4c0be97f333c050ff45321fcaa34d920">evmc_status_code</link> definition and allow convenient operator overloading usage. </para>
</note>
</para>
<para>
Definition at line <link linkend="_evmc_8hpp_source_1l00877">877</link> of file <link linkend="_evmc_8hpp_source">evmc.hpp</link>.</para>
<programlisting linenumbering="unnumbered"><anchor xml:id="_evmc_8hpp_1l00878"/>00878 {
<anchor xml:id="_evmc_8hpp_1l00879"/>00879 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<link linkend="_namespaceevmc_1a44c9aad0ac3f324d817e18720a1e37de">evmc::to_string</link>(status_code);
<anchor xml:id="_evmc_8hpp_1l00880"/>00880 }
</programlisting>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="evmc_8hpp_a8fbdc72590b7f78fb2afa785dd30dc98_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
